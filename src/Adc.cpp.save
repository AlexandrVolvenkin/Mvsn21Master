#include "Adc.h"
#include "Platform.h"

uint8_t CAdc::m_uiFlowControl;
//-----------------------------------------------------------------------------------------------------
CAdc::CAdc()
{

}

//-----------------------------------------------------------------------------------------------------
CAdc::~CAdc()
{

}

//-----------------------------------------------------------------------------------------------------
void CAdc::Init(void)
{
    // Отключаем цифровые входные буферы на линиях АЦП.
    DIDR0  = 0x3F;
    // SCK/128
    ADCSRA = CAdc::DIV128;
    ADCSRB = 0x00;
    // Внутренний источник опорного напряжения Vref = 1.1V
    ADMUX = (BIT(REFS1) | BIT(REFS0));
}

//-----------------------------------------------------------------------------------------------------
void CAdc::ChannelSelect(uint8_t uiChannel)
{
    ADMUX &= ~(uiChannel & 0x0F);
    ADMUX |= (uiChannel & 0x0F);
}

//-----------------------------------------------------------------------------------------------------
void CAdc::StartSingle(void)
{
    // Отключаем режим пониженного энергопотребления.
    PRR &= ~BIT(PRADC);
    // Включаем АЦП.
    ADCSRA |= (BIT(ADEN) | BIT(ADIE) | BIT(ADSC));
}

//-----------------------------------------------------------------------------------------------------
void CAdc::ContinuousMeasure(void)
{
    for (uint8_t i; i < HANDLED_CHANNEL_NUMBER; i++)
    {
        ChannelSelect(i);
    }
}

//-----------------------------------------------------------------------------------------------------
void CAdc::Stop(void)
{
    // Выключаем АЦП.
    ADCSRA &= ~(BIT(ADEN) | BIT(ADIE) | BIT(ADSC));
    // Включаем режим пониженного энергопотребления.
    PRR |= BIT(PRADC);
}

//-----------------------------------------------------------------------------------------------------
void CAdc::Fsm(void)
{
    switch (m_uiFlowControl)
    {
    case FSM_IDDLE:
        break;

    case FSM_START:
        break;

//    case :
//        break;
//m_fbMeasureIsComlete = false;
    default:
        break;
    }
}

//-----------------------------------------------------------------------------------------------------
#pragma vector = ADC_vect
__interrupt void SIG_ADC(void)
{
    m_fbMeasureIsComlete = true;
}
//-----------------------------------------------------------------------------------------------------
