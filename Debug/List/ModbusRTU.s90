///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR          29/Jun/2023  07:25:07
// Copyright 1996-2018 IAR Systems AB.
//
//    Source file  =  
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Modbus\ModbusRTU.cpp
//    Command line =  
//        -f C:\Users\Admin\AppData\Local\Temp\EWF7A9.tmp
//        (--string_literals_in_flash
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Modbus\ModbusRTU.cpp
//        --cpu=m48 -ms -o
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Debug\Obj -lB
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Debug\List
//        --initializers_in_flash --root_variables --debug
//        -DENABLE_BIT_DEFINITIONS -e -I
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\include\ -I
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Modbus\
//        --eeprom_size 256 --dlib --dlib_config "C:\Program Files (x86)\IAR
//        Systems\Embedded Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Ohz
//        --eec++)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Debug\List\ModbusRTU.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME ModbusRTU

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?CV_SWITCH_L06
        EXTERN ?EPILOGUE_B2_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE2_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC ??Execution
        PUBLIC ??FrameCheck
        PUBLIC ??GetFrameLength
        PUBLIC ??GetSystemTime
        PUBLIC ??Init
        PUBLIC ??MessageIsSended
        PUBLIC ??Receive
        PUBLIC ??ReceiveDisable
        PUBLIC ??ReceiveEnable
        PUBLIC ??RequestBasis
        PUBLIC ??Reset
        PUBLIC ??Select
        PUBLIC ??Send
        PUBLIC ??Tail
        PUBLIC ??TimeIsOver
        PUBLIC ??TransmitDisable
        PUBLIC ??TransmitEnable
        PUBLIC ??m_cParity
        PUBLIC ??m_pxDevice
        PUBLIC ??m_uiBaudRate
        PUBLIC ??m_uiDataBit
        PUBLIC ??m_uiStopBit
        PUBWEAK _A_ACSR
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADCSRB
        PUBWEAK _A_ADMUX
        PUBWEAK _A_ASSR
        PUBWEAK _A_CLKPR
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DIDR0
        PUBWEAK _A_DIDR1
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_GPIOR0
        PUBWEAK _A_GPIOR1
        PUBWEAK _A_GPIOR2
        PUBWEAK _A_GTCCR
        PUBWEAK _A_ICR1
        PUBWEAK _A_MCUCR
        PUBWEAK _A_MCUSR
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_OCR1A
        PUBWEAK _A_OCR1B
        PUBWEAK _A_OCR2A
        PUBWEAK _A_OCR2B
        PUBWEAK _A_OSCCAL
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCIFR
        PUBWEAK _A_PCMSK0
        PUBWEAK _A_PCMSK1
        PUBWEAK _A_PCMSK2
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PRR
        PUBWEAK _A_SMCR
        PUBWEAK _A_SP
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPMCSR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR1C
        PUBWEAK _A_TCCR2A
        PUBWEAK _A_TCCR2B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR0
        PUBWEAK _A_TIFR1
        PUBWEAK _A_TIFR2
        PUBWEAK _A_TIMSK0
        PUBWEAK _A_TIMSK1
        PUBWEAK _A_TIMSK2
        PUBWEAK _A_TWAMR
        PUBWEAK _A_TWAR
        PUBWEAK _A_TWBR
        PUBWEAK _A_TWCR
        PUBWEAK _A_TWDR
        PUBWEAK _A_TWSR
        PUBWEAK _A_UBRR0
        PUBWEAK _A_UCSR0A
        PUBWEAK _A_UCSR0B
        PUBWEAK _A_UCSR0C
        PUBWEAK _A_UDR0
        PUBWEAK _A_WDTCSR
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

`?<Name CUart 0>`   SYMBOL "CUart"
`?<Name CModbus 13>` SYMBOL "CModbus"
??m_bfByteIsReceived SYMBOL "m_bfByteIsReceived", `?<Name CUart 0>`
??m_bfFrameIsSended SYMBOL "m_bfFrameIsSended", `?<Name CUart 0>`
??m_nuiRxBuffByteCounter SYMBOL "m_nuiRxBuffByteCounter", `?<Name CUart 0>`
??m_puiDiscreteInputs SYMBOL "m_puiDiscreteInputs", `?<Name CModbus 13>`
??m_puiRxBuffer     SYMBOL "m_puiRxBuffer", `?<Name CModbus 13>`
??m_puiTxBuffer     SYMBOL "m_puiTxBuffer", `?<Name CModbus 13>`
??m_uiDiscreteInputsNumber SYMBOL "m_uiDiscreteInputsNumber", `?<Name CModbus 13>`
??m_uiFlowControl   SYMBOL "m_uiFlowControl", `?<Name CModbus 13>`
??m_uiLastSystemTime SYMBOL "m_uiLastSystemTime", `?<Name CModbus 13>`
??m_uiMessageLength SYMBOL "m_uiMessageLength", `?<Name CModbus 13>`
??m_uiSlaveAddress  SYMBOL "m_uiSlaveAddress", `?<Name CModbus 13>`
`?<Name CPlatform 37>` SYMBOL "CPlatform"
??m_uiSystemTick    SYMBOL "m_uiSystemTick", `?<Name CPlatform 37>`
`?<Name CModbusRTU 41>` SYMBOL "CModbusRTU"
??m_cParity         SYMBOL "m_cParity", `?<Name CModbusRTU 41>`
??m_pxDevice        SYMBOL "m_pxDevice", `?<Name CModbusRTU 41>`
??m_uiBaudRate      SYMBOL "m_uiBaudRate", `?<Name CModbusRTU 41>`
??m_uiDataBit       SYMBOL "m_uiDataBit", `?<Name CModbusRTU 41>`
??m_uiStopBit       SYMBOL "m_uiStopBit", `?<Name CModbusRTU 41>`

        EXTERN ??Init_1
        EXTERN ??Read
        EXTERN ??ReceiveDisable_1
        EXTERN ??ReceiveEnable_1
        EXTERN ??ReceiveMessage
        EXTERN ??Reset_1
        EXTERN ??SendMessage
        EXTERN ??TransmitDisable_1
        EXTERN ??TransmitEnable_1
        EXTERN ??Write
        EXTERN ??m_bfByteIsReceived
        EXTERN ??m_bfFrameIsSended
        EXTERN ??m_nuiRxBuffByteCounter
        EXTERN ??m_puiDiscreteInputs
        EXTERN ??m_puiRxBuffer
        EXTERN ??m_puiTxBuffer
        EXTERN ??m_uiDiscreteInputsNumber
        EXTERN ??m_uiFlowControl
        EXTERN ??m_uiLastSystemTime
        EXTERN ??m_uiMessageLength
        EXTERN ??m_uiSlaveAddress
        EXTERN ??m_uiSystemTick
        EXTERN ??usCrc16

// D:\Projects\CurrentProjects\CautoProjects\Mvsn21\Mvsn21\Modbus\ModbusRTU.cpp
//    1 //-----------------------------------------------------------------------------------------------------
//    2 //  Sourse      : FileName.cpp
//    3 //  Created     : 01.06.2022
//    4 //  Author      : Alexandr Volvenkin
//    5 //  email       : aav-36@mail.ru
//    6 //  GitHub      : https://github.com/AlexandrVolvenkin
//    7 //-----------------------------------------------------------------------------------------------------
//    8 #include "ModbusRTU.h"

        ASEGN ABSOLUTE:DATA:ROOT,0c6H
// union <unnamed> volatile __io _A_UDR0
_A_UDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c4H
// union <unnamed> volatile __io _A_UBRR0
_A_UBRR0:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,0c2H
// union <unnamed> volatile __io _A_UCSR0C
_A_UCSR0C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c1H
// union <unnamed> volatile __io _A_UCSR0B
_A_UCSR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c0H
// union <unnamed> volatile __io _A_UCSR0A
_A_UCSR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bdH
// union <unnamed> volatile __io _A_TWAMR
_A_TWAMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bcH
// union <unnamed> volatile __io _A_TWCR
_A_TWCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bbH
// union <unnamed> volatile __io _A_TWDR
_A_TWDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0baH
// union <unnamed> volatile __io _A_TWAR
_A_TWAR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b9H
// union <unnamed> volatile __io _A_TWSR
_A_TWSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b8H
// union <unnamed> volatile __io _A_TWBR
_A_TWBR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b6H
// union <unnamed> volatile __io _A_ASSR
_A_ASSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b4H
// union <unnamed> volatile __io _A_OCR2B
_A_OCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b3H
// union <unnamed> volatile __io _A_OCR2A
_A_OCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b2H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b1H
// union <unnamed> volatile __io _A_TCCR2B
_A_TCCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b0H
// union <unnamed> volatile __io _A_TCCR2A
_A_TCCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,08aH
// union <unnamed> volatile __io _A_OCR1B
_A_OCR1B:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,088H
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,086H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,084H
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,082H
// union <unnamed> volatile __io _A_TCCR1C
_A_TCCR1C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,081H
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,080H
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07fH
// union <unnamed> volatile __io _A_DIDR1
_A_DIDR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07eH
// union <unnamed> volatile __io _A_DIDR0
_A_DIDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07cH
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07bH
// union <unnamed> volatile __io _A_ADCSRB
_A_ADCSRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07aH
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,078H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,070H
// union <unnamed> volatile __io _A_TIMSK2
_A_TIMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06fH
// union <unnamed> volatile __io _A_TIMSK1
_A_TIMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06eH
// union <unnamed> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06dH
// union <unnamed> volatile __io _A_PCMSK2
_A_PCMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06cH
// union <unnamed> volatile __io _A_PCMSK1
_A_PCMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06bH
// union <unnamed> volatile __io _A_PCMSK0
_A_PCMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,069H
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,068H
// union <unnamed> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,066H
// union <unnamed> volatile __io _A_OSCCAL
_A_OSCCAL:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,064H
// union <unnamed> volatile __io _A_PRR
_A_PRR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,061H
// union <unnamed> volatile __io _A_CLKPR
_A_CLKPR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,060H
// union <unnamed> volatile __io _A_WDTCSR
_A_WDTCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05dH
// union <unnamed> volatile __io _A_SP
_A_SP:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,057H
// union <unnamed> volatile __io _A_SPMCSR
_A_SPMCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,054H
// union <unnamed> volatile __io _A_MCUSR
_A_MCUSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,053H
// union <unnamed> volatile __io _A_SMCR
_A_SMCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,050H
// union <unnamed> volatile __io _A_ACSR
_A_ACSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04cH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04bH
// union <unnamed> volatile __io _A_GPIOR2
_A_GPIOR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04aH
// union <unnamed> volatile __io _A_GPIOR1
_A_GPIOR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,048H
// union <unnamed> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,047H
// union <unnamed> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,046H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,045H
// union <unnamed> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,044H
// union <unnamed> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,043H
// union <unnamed> volatile __io _A_GTCCR
_A_GTCCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,041H
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,040H
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03fH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03eH
// union <unnamed> volatile __io _A_GPIOR0
_A_GPIOR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03dH
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03cH
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03bH
// union <unnamed> volatile __io _A_PCIFR
_A_PCIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,037H
// union <unnamed> volatile __io _A_TIFR2
_A_TIFR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,036H
// union <unnamed> volatile __io _A_TIFR1
_A_TIFR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,035H
// union <unnamed> volatile __io _A_TIFR0
_A_TIFR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02aH
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,026H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,025H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,024H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,023H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS8 1
//    9 #include "Crc.h"
//   10 
//   11 

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   12 CUart* CModbusRTU::m_pxDevice;
??m_pxDevice:
        DS8 2
//   13 /* Bauds: 9600, 19200, 57600, 115200, etc */

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   14 uint32_t CModbusRTU::m_uiBaudRate;
??m_uiBaudRate:
        DS8 4
//   15 /* Data bit */
//   16 uint8_t CModbusRTU::m_uiDataBit;
??m_uiDataBit:
        DS8 1
//   17 /* Stop bit */
//   18 uint8_t CModbusRTU::m_uiStopBit;
??m_uiStopBit:
        DS8 1
//   19 /* Parity: 'N', 'O', 'E' */
//   20 char CModbusRTU::m_cParity;
??m_cParity:
        DS8 1
//   21 
//   22 ////-----------------------------------------------------------------------------------------------------
//   23 //CModbusRTU::CModbusRTU()
//   24 //{
//   25 //
//   26 //}
//   27 //
//   28 //////-----------------------------------------------------------------------------------------------------
//   29 ////CModbusRTU::CModbusRTU(CUart* pxDevice,
//   30 ////                       uint32_t uiBaudRate,
//   31 ////                       char cParity,
//   32 ////                       uint8_t uiDataBit,
//   33 ////                       uint8_t uiStopBit,
//   34 ////                       uint8_t *puiRxBuffer,
//   35 ////                       uint8_t *puiTxBuffer) :
//   36 ////    pxDevice(pxDevice),
//   37 ////    uiBaudRate(uiBaudRate),
//   38 ////    cParity(cParity),
//   39 ////    uiDataBit(uiDataBit),
//   40 ////    uiStopBit(uiStopBit),
//   41 ////    m_puiRxBuffer(puiRxBuffer),
//   42 ////    m_puiTxBuffer(puiTxBuffer)
//   43 ////{
//   44 ////    m_uiFlowControl = MODBUS_IDDLE;
//   45 ////}
//   46 //
//   47 //
//   48 ////-----------------------------------------------------------------------------------------------------
//   49 //CModbusRTU::~CModbusRTU()
//   50 //{
//   51 //
//   52 //}
//   53 
//   54 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   55 void CModbusRTU::Init(CUart* pxDevice,
??Init:
//   56                       uint32_t uiBaudRate,
//   57                       char cParity,
//   58                       uint8_t uiDataBit,
//   59                       uint8_t uiStopBit,
//   60                       uint8_t *puiRxBuffer,
//   61                       uint8_t *puiTxBuffer,
//   62                       uint8_t *puiCoils,
//   63                       uint8_t *puiDiscreteInputs,
//   64                       uint16_t *pui16HoldingRegisters,
//   65                       uint16_t *pui16InputRegisters,
//   66                       uint16_t uiCoilsNumber,
//   67                       uint16_t uiDiscreteInputsNumber,
//   68                       uint16_t uiHoldingRegistersNumber,
//   69                       uint16_t uiInputRegistersNumber)
//   70 {
        RCALL   ?PROLOGUE4_L09
//   71 //    m_pxDevice = pxDevice;
//   72     m_uiBaudRate = uiBaudRate;
        LDI     R30, LOW(??m_uiBaudRate)
        LDI     R31, (??m_uiBaudRate) >> 8
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
//   73     m_cParity = cParity;
        STD     Z+6, R18
//   74     m_uiDataBit = uiDataBit;
        STD     Z+4, R19
//   75     m_uiStopBit = uiStopBit;
        LDD     R16, Y+4
        STD     Z+5, R16
        LDD     R16, Y+5
        LDD     R17, Y+6
//   76     m_puiRxBuffer = puiRxBuffer;
        LDI     R26, LOW(??m_puiRxBuffer)
        LDI     R27, (??m_puiRxBuffer) >> 8
        ST      X+, R16
        ST      X, R17
        LDD     R18, Y+7
        LDD     R19, Y+8
//   77     m_puiTxBuffer = puiTxBuffer;
        LDI     R26, LOW(??m_puiTxBuffer)
        LDI     R27, (??m_puiTxBuffer) >> 8
        ST      X+, R18
        ST      X, R19
//   78 //    m_puiCoils = puiCoils;
//   79     m_puiDiscreteInputs = puiDiscreteInputs;
        LDD     R20, Y+11
        LDD     R21, Y+12
        LDI     R26, LOW(??m_puiDiscreteInputs)
        LDI     R27, (??m_puiDiscreteInputs) >> 8
        ST      X+, R20
        ST      X, R21
//   80 //    m_pui16HoldingRegisters = pui16HoldingRegisters;
//   81 //    m_pui16InputRegisters = pui16InputRegisters;
//   82 //    m_uiCoilsNumber = uiCoilsNumber;
//   83     m_uiDiscreteInputsNumber = uiDiscreteInputsNumber;
        LDD     R20, Y+19
        LDD     R21, Y+20
        LDI     R26, LOW(??m_uiDiscreteInputsNumber)
        LDI     R27, (??m_uiDiscreteInputsNumber) >> 8
        ST      X+, R20
        ST      X, R21
//   84 //    m_uiHoldingRegistersNumber = uiHoldingRegistersNumber;
//   85 //    m_uiInputRegistersNumber = uiInputRegistersNumber;
//   86     m_uiSlaveAddress = 2;
        LDI     R20, 2
        STS     ??m_uiSlaveAddress, R20
//   87 
//   88     CUart::Init(m_uiBaudRate,
//   89                 m_cParity,
//   90                 m_uiDataBit,
//   91                 m_uiStopBit,
//   92                 puiRxBuffer,
//   93                 puiTxBuffer);
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        LDD     R22, Z+5
        LDD     R21, Z+4
        LDD     R20, Z+6
        RCALL   ??Subroutine9_0
??CrossCallReturnLabel_15:
        LDD     R18, Z+2
        LDD     R19, Z+3
        RCALL   ??Init_1
//   94 }
        LDI     R30, 25
        RJMP    ?EPILOGUE_B4_L09
//   95 
//   96 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   97 void CModbusRTU::Reset(void)
??Reset:
//   98 {
//   99     CUart::Reset();
        RJMP    ??Reset_1
//  100 }
//  101 
//  102 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  103 void CModbusRTU::ReceiveEnable(void)
??ReceiveEnable:
//  104 {
//  105     CUart::ReceiveEnable();
        RJMP    ??ReceiveEnable_1
//  106 }
//  107 
//  108 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  109 void CModbusRTU::ReceiveDisable(void)
??ReceiveDisable:
//  110 {
//  111     CUart::ReceiveDisable();
        RJMP    ??ReceiveDisable_1
//  112 }
//  113 
//  114 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  115 void CModbusRTU::TransmitEnable(void)
??TransmitEnable:
//  116 {
//  117     CUart::TransmitEnable();
        RJMP    ??TransmitEnable_1
//  118 }
//  119 
//  120 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  121 void CModbusRTU::TransmitDisable(void)
??TransmitDisable:
//  122 {
//  123     CUart::TransmitDisable();
        RJMP    ??TransmitDisable_1
//  124 }
//  125 
//  126 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  127 int16_t CModbusRTU::Tail(uint8_t *puiMessage, uint16_t uiLength)
??Tail:
//  128 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  129     uint16_t uiCrc = usCrc16(puiMessage, uiLength);
        RCALL   ??usCrc16
//  130     puiMessage[uiLength++] = uiCrc & 0x00FF;
        MOVW    R31:R30, R27:R26
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R16
//  131     puiMessage[uiLength++] = uiCrc >> 8;
        ADIW    R25:R24, 1
        ADD     R26, R24
        ADC     R27, R25
        ST      X, R17
//  132 
//  133     return uiLength;
        ADIW    R25:R24, 1
        MOVW    R17:R16, R25:R24
        REQUIRE ?Subroutine8
        ;               // Fall through to label ?Subroutine8
//  134 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine8:
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//  135 
//  136 /* Builds a RTU request header */

        RSEG CODE:CODE:NOROOT(1)
//  137 int16_t CModbusRTU::RequestBasis(uint8_t uiSlave,
??RequestBasis:
//  138                                  uint8_t uiFunctionCode,
//  139                                  uint16_t uiAddress,
//  140                                  uint16_t uiBitNumber,
//  141                                  uint8_t *puiRequest)
//  142 {
//  143     puiRequest[0] = uiSlave;
        MOVW    R31:R30, R23:R22
        ST      Z, R16
//  144     puiRequest[1] = uiFunctionCode;
        STD     Z+1, R17
//  145     puiRequest[2] = (static_cast<uint8_t>(uiAddress >> 8));
        STD     Z+2, R19
//  146     puiRequest[3] = (static_cast<uint8_t>(uiAddress & 0x00ff));
        STD     Z+3, R18
//  147     puiRequest[4] = (static_cast<uint8_t>(uiBitNumber >> 8));
        STD     Z+4, R21
//  148     puiRequest[5] = (static_cast<uint8_t>(uiBitNumber & 0x00ff));
        STD     Z+5, R20
//  149 
//  150     return _MODBUS_RTU_PRESET_REQ_LENGTH;
        LDI     R16, 6
        LDI     R17, 0
        RET
//  151 }
//  152 
//  153 ///* Builds a RTU response header */
//  154 //int16_t CModbusRTU::ResponseBasis(uint8_t uiSlave, uint8_t uiFunctionCode, uint8_t *puiResponse)
//  155 //{
//  156 //    /* In this case, the slave is certainly valid because a check is already
//  157 //     * done in _modbus_rtu_listen */
//  158 //    puiResponse[0] = uiSlave;
//  159 //    puiResponse[1] = uiFunctionCode;
//  160 //
//  161 //    return _MODBUS_RTU_PRESET_RSP_LENGTH;
//  162 //}
//  163 
//  164 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  165 int16_t CModbusRTU::Send(uint8_t *puiMessage, uint16_t uiLength)
??Send:
//  166 {
//  167     return CUart::Write(puiMessage, uiLength);
        RJMP    ??Write
//  168 }
//  169 
//  170 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  171 uint8_t CModbusRTU::MessageIsSended(void)
??MessageIsSended:
//  172 {
//  173     return CUart::FrameIsSended();
        LDS     R16, ??m_bfFrameIsSended
        RET
//  174 }
//  175 
//  176 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  177 uint8_t CModbusRTU::Select(void)
??Select:
//  178 {
//  179     return CUart::ByteIsReceived();
        LDS     R16, ??m_bfByteIsReceived
        RET
//  180 }
//  181 
//  182 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  183 int16_t CModbusRTU::Receive(uint8_t *puiDestination, uint16_t uiLength)
??Receive:
//  184 {
//  185     return CUart::Read(puiDestination, uiLength);
        RJMP    ??Read
//  186 }
//  187 
//  188 ////-----------------------------------------------------------------------------------------------------
//  189 //uint8_t CModbusRTU::FrameIsReceived(void)
//  190 //{
//  191 //    if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  192 //            m_uiGuardTimeout)
//  193 //    {
//  194 //        return 1;
//  195 //    }
//  196 //    else
//  197 //    {
//  198 //        return 0;
//  199 //    }
//  200 //};
//  201 //
//  202 ////-----------------------------------------------------------------------------------------------------
//  203 //uint8_t CModbusRTU::ReceiveTimeIsOver(void)
//  204 //{
//  205 //    if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  206 //            m_uiReceiveTimeout)
//  207 //    {
//  208 //        return 1;
//  209 //    }
//  210 //    else
//  211 //    {
//  212 //        return 0;
//  213 //    }
//  214 //};
//  215 //
//  216 ////-----------------------------------------------------------------------------------------------------
//  217 //uint8_t CModbusRTU::ConfirmationReceiveTimeIsOver(void)
//  218 //{
//  219 //    if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  220 //            m_uiConfirmationTimeout)
//  221 //    {
//  222 //        return 1;
//  223 //    }
//  224 //    else
//  225 //    {
//  226 //        return 0;
//  227 //    }
//  228 //};
//  229 //
//  230 ////-----------------------------------------------------------------------------------------------------
//  231 //uint8_t CModbusRTU::TransmitDelayTimeIsOver(void)
//  232 //{
//  233 //    if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  234 //            m_uiTransmitDelayTimeout)
//  235 //    {
//  236 //        return 1;
//  237 //    }
//  238 //    else
//  239 //    {
//  240 //        return 0;
//  241 //    }
//  242 //};
//  243 
//  244 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  245 int8_t CModbusRTU::TimeIsOver(uint16_t uiTimeout)
??TimeIsOver:
//  246 {
//  247     if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  248             uiTimeout)
        RCALL   ?Subroutine6
??CrossCallReturnLabel_12:
        LD      R20, Z
        LDD     R21, Z+1
        SUB     R18, R20
        SBC     R19, R21
        CP      R18, R16
        CPC     R19, R17
        BRCS    ??TimeIsOver_1
//  249     {
//  250         return 1;
        LDI     R16, 1
        RET
//  251     }
//  252     else
//  253     {
//  254         return 0;
??TimeIsOver_1:
        LDI     R16, 0
        RET
//  255     }
//  256 };
//  257 
//  258 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  259 uint16_t CModbusRTU::GetFrameLength(void)
??GetFrameLength:
//  260 {
//  261     return CUart::GetFrameLength();
        LDI     R30, LOW(??m_nuiRxBuffByteCounter)
        LDI     R31, (??m_nuiRxBuffByteCounter) >> 8
        RJMP    ??Subroutine9_0
//  262 }
//  263 
//  264 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  265 void CModbusRTU::GetSystemTime(void)
??GetSystemTime:
//  266 {
//  267     m_uiLastSystemTime = CPlatform::GetSystemTick();
        LDI     R30, LOW(??m_uiSystemTick)
        LDI     R31, (??m_uiSystemTick) >> 8
        RCALL   ??Subroutine9_0
??CrossCallReturnLabel_16:
        REQUIRE ?Subroutine7
        ;               // Fall through to label ?Subroutine7
//  268 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine7:
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        ST      Z, R16
        STD     Z+1, R17
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
        RCALL   ?Subroutine5
??CrossCallReturnLabel_11:
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        REQUIRE ??Subroutine9_0
        ;               // Fall through to label ??Subroutine9_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine9_0:
        LD      R16, Z
        LDD     R17, Z+1
        RET
//  269 
//  270 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  271 int8_t CModbusRTU::FrameCheck(uint8_t *puiSourse, uint16_t uiLength)
??FrameCheck:
//  272 {
        RCALL   ?PROLOGUE2_L09
//  273     if (uiLength < _MIN_MESSAGE_LENGTH)
        CPI     R18, 4
        LDI     R20, 0
        CPC     R19, R20
        BRCS    ??FrameCheck_1
//  274     {
//  275         return 0;
//  276     }
//  277 
//  278     uint16_t uiCrc = ((static_cast<uint16_t>(puiSourse[uiLength - 1]) << 8) |
//  279                       (static_cast<uint16_t>(puiSourse[uiLength - 2])));
        MOVW    R31:R30, R17:R16
        ADD     R30, R18
        ADC     R31, R19
        SBIW    R31:R30, 2
        LDD     R25, Z+1
        LD      R24, Z
//  280     if (usCrc16(puiSourse,
//  281                 (uiLength - _MODBUS_RTU_CHECKSUM_LENGTH)) == uiCrc)
        SUBI    R18, 2
        SBCI    R19, 0
        RCALL   ??usCrc16
        CP      R16, R24
        CPC     R17, R25
        BRNE    ??FrameCheck_1
//  282     {
//  283         return 1;
        LDI     R16, 1
        RJMP    ??FrameCheck_2
//  284     }
//  285     else
//  286     {
//  287         return 0;
??FrameCheck_1:
        LDI     R16, 0
??FrameCheck_2:
        LDI     R30, 2
        RJMP    ?EPILOGUE_B2_L09
//  288     }
//  289 }
//  290 
//  291 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  292 void CModbusRTU::Execution(void)
??Execution:
//  293 {
        RCALL   ?PROLOGUE4_L09
//  294     int16_t iReceivedCounter;
//  295 
//  296     switch (m_uiFlowControl)
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        RCALL   ??Subroutine9_0
??CrossCallReturnLabel_17:
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R26, Z
        LDD     R27, Z+1
        ADD     R26, R16
        ADC     R27, R17
        LDI     R24, 32
        LDI     R25, 0
        SUB     R24, R16
        SBC     R25, R17
        LDS     R16, ??m_uiFlowControl
        LDI     R30, LOW(`?<Jumptable for Execution>_0`)
        LDI     R31, (`?<Jumptable for Execution>_0`) >> 8
        RJMP    ?CV_SWITCH_L06
//  297     {
//  298     case IDDLE:
//  299         break;
//  300 
//  301 //    case START_REQUEST:
//  302 //        GetSystemTime();
//  303 //        Reset();
//  304 //        m_uiMessageLength = 0;
//  305 //        ReceiveEnable();
//  306 //        m_uiFlowControl = WAITING_MESSAGE_REQUEST;
//  307 //        break;
//  308 //
//  309 //    case WAITING_MESSAGE_REQUEST:
//  310 //        if (Select())
//  311 //        {
//  312 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  313 //
//  314 //            if (iReceivedCounter > 0)
//  315 //            {
//  316 //                m_uiMessageLength += iReceivedCounter;
//  317 //                GetSystemTime();
//  318 //                m_uiFlowControl = RECEIVE_MESSAGE_REQUEST;
//  319 //            }
//  320 //            else if (iReceivedCounter == -1)
//  321 //            {
//  322 //                m_uiFlowControl = START_REQUEST;
//  323 //            }
//  324 //        }
//  325 //
//  326 //        if (TimeIsOver(m_uiReceiveTimeout))
//  327 //        {
//  328 //            m_uiFlowControl = START_REQUEST;
//  329 //        }
//  330 //
//  331 //        break;
//  332 //
//  333 //    case RECEIVE_MESSAGE_REQUEST:
//  334 //        if (Select())
//  335 //        {
//  336 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  337 //
//  338 //            if (iReceivedCounter > 0)
//  339 //            {
//  340 //                m_uiMessageLength += iReceivedCounter;
//  341 //                GetSystemTime();
//  342 //            }
//  343 //            else if (iReceivedCounter == -1)
//  344 //            {
//  345 //                m_uiFlowControl = START_REQUEST;
//  346 //            }
//  347 //        }
//  348 //
//  349 //        if (TimeIsOver(m_uiGuardTimeout))
//  350 //        {
//  351 //            if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
//  352 //            {
//  353 //                m_uiFlowControl = REPLY_REQUEST;
//  354 //            }
//  355 //            else
//  356 //            {
//  357 //                m_uiFlowControl = START_REQUEST;
//  358 //            }
//  359 //        }
//  360 //
//  361 //        break;
//  362 //
//  363 //    case REPLY_REQUEST:
//  364 //        if (Reply(m_puiRxBuffer, m_puiTxBuffer, m_uiMessageLength))
//  365 //        {
//  366 //            CPlatform::TxLedOn();
//  367 //            m_uiFlowControl = FRAME_TRANSMIT_CONFIRMATION;
//  368 //        }
//  369 //        else
//  370 //        {
//  371 //            CPlatform::TxLedOff();
//  372 //            m_uiFlowControl = START_REQUEST;
//  373 //        }
//  374 //        break;
//  375 //
//  376 //    case FRAME_TRANSMIT_CONFIRMATION:
//  377 //        GetSystemTime();
//  378 //        Reset();
//  379 //        ReceiveDisable();
//  380 //        m_uiFlowControl = WAITING_FRAME_TRANSMIT_CONFIRMATION;
//  381 //        break;
//  382 //
//  383 //    case WAITING_FRAME_TRANSMIT_CONFIRMATION:
//  384 //        if (TimeIsOver(m_uiTransmitDelayTimeout))
//  385 //        {
//  386 //            SendMessage(m_puiTxBuffer, m_uiMessageLength);
//  387 //            TransmitEnable();
//  388 //            m_uiFlowControl = END_WAITING_FRAME_TRANSMIT_CONFIRMATION;
//  389 //        }
//  390 //        break;
//  391 //
//  392 //    case END_WAITING_FRAME_TRANSMIT_CONFIRMATION:
//  393 //        if (MessageIsSended())
//  394 //        {
//  395 //            TransmitDisable();
//  396 //            CPlatform::TxLedOff();
//  397 //            m_uiFlowControl = START_REQUEST;
//  398 //        }
//  399 //
//  400 //        break;
//  401 //
//  402 //    case STOP_REQUEST:
//  403 //        CModbusRTU::ReceiveDisable();
//  404 //        m_uiFlowControl = IDDLE;
//  405 //        break;
//  406 
//  407 //-----------------------------------------------------------------------------------------------------
//  408 // ModbusMaster
//  409     case START_CONFIRMATION:
//  410         GetSystemTime();
??Execution_1:
        RCALL   ?Subroutine1
//  411         Reset();
//  412         m_uiMessageLength = 0;
??CrossCallReturnLabel_3:
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LDI     R16, 0
        ST      Z, R16
        STD     Z+1, R16
//  413         ReceiveEnable();
        RCALL   ??ReceiveEnable_1
//  414         m_uiFlowControl = WAITING_MESSAGE_CONFIRMATION;
        LDI     R16, 11
        RJMP    ??Execution_2
//  415         break;
//  416 
//  417     case WAITING_MESSAGE_CONFIRMATION:
//  418         if (Select())
??Execution_3:
        LDS     R16, ??m_bfByteIsReceived
        TST     R16
        BREQ    ??Execution_4
//  419         {
//  420             iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
        RCALL   ?Subroutine4
//  421 
//  422             if (iReceivedCounter > 0)
??CrossCallReturnLabel_7:
        BRLT    ??Execution_5
//  423             {
//  424                 GetSystemTime();
        RCALL   ?Subroutine0
//  425                 m_uiMessageLength += iReceivedCounter;
//  426                 m_uiFlowControl = RECEIVE_MESSAGE_CONFIRMATION;
??CrossCallReturnLabel_0:
        LDI     R16, 12
        RJMP    ??Execution_6
//  427             }
//  428             else if (iReceivedCounter == -1)
??Execution_5:
        CPI     R16, 255
        SBCI    R17, 255
        BRNE    ??Execution_4
//  429             {
//  430                 m_uiFlowControl = STOP_CONFIRMATION;
        LDI     R16, 17
??Execution_6:
        STS     ??m_uiFlowControl, R16
//  431             }
//  432         }
//  433 
//  434         if (TimeIsOver(m_uiConfirmationTimeout))
??Execution_4:
        LDI     R16, 20
        RCALL   ?Subroutine3
??CrossCallReturnLabel_4:
        BRNE    ??Execution_7
        RJMP    ??Execution_8
//  435         {
//  436             m_uiFlowControl = STOP_CONFIRMATION;
//  437         }
//  438 
//  439         break;
//  440 
//  441     case RECEIVE_MESSAGE_CONFIRMATION:
//  442         if (Select())
??Execution_9:
        LDS     R16, ??m_bfByteIsReceived
        TST     R16
        BREQ    ??Execution_10
//  443         {
//  444             iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
        RCALL   ?Subroutine4
//  445 
//  446             if (iReceivedCounter > 0)
??CrossCallReturnLabel_8:
        BRLT    ??Execution_11
//  447             {
//  448                 GetSystemTime();
        RCALL   ?Subroutine0
//  449                 m_uiMessageLength += iReceivedCounter;
//  450             }
??CrossCallReturnLabel_1:
        RJMP    ??Execution_10
//  451             else if (iReceivedCounter == -1)
??Execution_11:
        CPI     R16, 255
        SBCI    R17, 255
        BRNE    ??Execution_10
//  452             {
//  453                 m_uiFlowControl = STOP_CONFIRMATION;
        LDI     R16, 17
        STS     ??m_uiFlowControl, R16
//  454             }
//  455         }
//  456 
//  457         if (TimeIsOver(m_uiGuardTimeout))
??Execution_10:
        LDI     R16, 4
        RCALL   ?Subroutine3
??CrossCallReturnLabel_5:
        BREQ    ??Execution_8
//  458         {
//  459             if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
        RCALL   ?Subroutine2
??CrossCallReturnLabel_19:
        RCALL   ??FrameCheck
        TST     R16
        BREQ    ??Execution_7
//  460             {
//  461                 m_uiFlowControl = REPLY_CONFIRMATION;
        LDI     R16, 13
        RJMP    ??Execution_2
//  462             }
//  463             else
//  464             {
//  465                 m_uiFlowControl = STOP_CONFIRMATION;
//  466             }
//  467         }
//  468 
//  469         break;
//  470 
//  471     case REPLY_CONFIRMATION:
//  472         if (ReceiveMessage(m_puiRxBuffer, m_uiMessageLength))
??Execution_12:
        RCALL   ?Subroutine2
??CrossCallReturnLabel_20:
        RCALL   ??ReceiveMessage
//  473         {
//  474             m_uiFlowControl = STOP_CONFIRMATION;
//  475         }
//  476         else
//  477         {
//  478             m_uiFlowControl = STOP_CONFIRMATION;
??Execution_7:
        LDI     R16, 17
        RJMP    ??Execution_2
//  479         }
//  480         break;
//  481 
//  482     case FRAME_TRANSMIT_REQUEST:
//  483         GetSystemTime();
??Execution_13:
        RCALL   ?Subroutine1
//  484         Reset();
//  485 //        CPlatform::TxLedOn();
//  486         m_uiFlowControl = WAITING_FRAME_TRANSMIT_REQUEST;
??CrossCallReturnLabel_2:
        LDI     R16, 15
        RJMP    ??Execution_2
//  487         break;
//  488 
//  489     case WAITING_FRAME_TRANSMIT_REQUEST:
//  490         if (TimeIsOver(m_uiTransmitDelayTimeout))
??Execution_14:
        LDI     R16, 5
        RCALL   ?Subroutine3
??CrossCallReturnLabel_6:
        BREQ    ??Execution_8
//  491         {
//  492             SendMessage(m_puiTxBuffer, m_uiMessageLength);
        RCALL   ?Subroutine5
??CrossCallReturnLabel_9:
        LDI     R30, LOW(??m_puiTxBuffer)
        LDI     R31, (??m_puiTxBuffer) >> 8
        RCALL   ??Subroutine9_0
??CrossCallReturnLabel_18:
        RCALL   ??SendMessage
//  493             TransmitEnable();
        RCALL   ??TransmitEnable_1
//  494             m_uiFlowControl = END_WAITING_FRAME_TRANSMIT_REQUEST;
        LDI     R16, 16
        RJMP    ??Execution_2
//  495         }
//  496         break;
//  497 
//  498     case END_WAITING_FRAME_TRANSMIT_REQUEST:
//  499         if (MessageIsSended())
??Execution_15:
        LDS     R16, ??m_bfFrameIsSended
        TST     R16
        BREQ    ??Execution_8
//  500         {
//  501             TransmitDisable();
        RCALL   ??TransmitDisable_1
//  502 //            CPlatform::TxLedOff();
//  503             m_uiFlowControl = START_CONFIRMATION;
        LDI     R16, 10
        RJMP    ??Execution_2
//  504         }
//  505 
//  506         break;
//  507 
//  508     case STOP_CONFIRMATION:
//  509         ReceiveDisable();
??Execution_16:
        RCALL   ??ReceiveDisable_1
//  510         m_uiFlowControl = IDDLE;
        LDI     R16, 0
??Execution_2:
        STS     ??m_uiFlowControl, R16
//  511         break;
//  512 
//  513     default:
//  514         break;
//  515     }
//  516 }
??Execution_8:
        RJMP    ?Subroutine8

        RSEG CODE:CODE:NOROOT(1)
?Subroutine5:
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine4:
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
        RCALL   ??Receive
        CPI     R16, 1
        LDI     R18, 0
        CPC     R17, R18
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
        LDI     R17, 0
        RCALL   ??TimeIsOver
        TST     R16
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
        LDI     R30, LOW(??m_uiSystemTick)
        LDI     R31, (??m_uiSystemTick) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RCALL   ?Subroutine7
??CrossCallReturnLabel_14:
        RJMP    ??Reset_1

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        RCALL   ?Subroutine6
??CrossCallReturnLabel_13:
        ST      Z, R18
        STD     Z+1, R19
        RCALL   ?Subroutine5
??CrossCallReturnLabel_10:
        ADD     R18, R16
        ADC     R19, R17
        ST      Z, R18
        STD     Z+1, R19
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine6:
        LDI     R30, LOW(??m_uiSystemTick)
        LDI     R31, (??m_uiSystemTick) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        RET

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for Execution>_0`:
        DB      10
        DB      0
        DW      (??Execution_8) /2
        DW      8
        DW      (??Execution_1) /2
        DW      (??Execution_3) /2
        DW      (??Execution_9) /2
        DW      (??Execution_12) /2
        DW      (??Execution_13) /2
        DW      (??Execution_14) /2
        DW      (??Execution_15) /2
        DW      (??Execution_16) /2

        RSEG NEAR_F:CODE:ROOT(0)
        DC8 0, 0

        END
//  517 //-----------------------------------------------------------------------------------------------------
//  518 
// 
//  87 bytes in segment ABSOLUTE
// 558 bytes in segment CODE
//   6 bytes in segment INITTAB
//   2 bytes in segment NEAR_F
//   9 bytes in segment NEAR_Z
//  22 bytes in segment SWITCH
// 
// 582 bytes of CODE memory (+  6 bytes shared)
//   9 bytes of DATA memory (+ 87 bytes shared)
//
//Errors: none
//Warnings: 4
