///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR          08/May/2022  08:05:12
// Copyright 1996-2018 IAR Systems AB.
//
//    Source file  =  D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Mvsn21.cpp
//    Command line =  
//        -f C:\Users\ghost\AppData\Local\Temp\EW7D56.tmp
//        (--string_literals_in_flash
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Mvsn21.cpp --cpu=m48 -ms
//        -o D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\Obj -lB
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\List
//        --initializers_in_flash --root_variables --no_inline --no_cross_call
//        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\include\ -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Modbus\ --eeprom_size 256
//        --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
//        Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Om --eec++)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\List\Mvsn21.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME Mvsn21

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?EPILOGUE_B2_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE2_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK ??ByteIsReceived
        PUBLIC ??Exchange
        PUBLIC ??MeasureFsm
        PUBWEAK ??MeasureIsComlete
        PUBLIC ??ReadData
        PUBLIC ??ReportType
        PUBLIC ??Reset
        PUBLIC ??Select
        PUBLIC ??SpiBusExchangeDisable
        PUBLIC ??SpiBusExchangeEnable
        PUBLIC ??SpiFsm
        PUBLIC ??SpiReply
        PUBLIC ??auiDiscreteInputBitData
        PUBLIC ??axChipsChannelsData
        PUBLIC ??axMeasurementChannelRemap
        PUBLIC ??m_aucRtuCoilsArray
        PUBLIC ??m_aucRtuDiscreteInputsArray
        PUBLIC ??m_aucRtuHoldingRegistersArray
        PUBLIC ??m_aucRtuInputRegistersArray
        PUBLIC ??m_aui8ReceiveMessageBuff
        PUBLIC ??m_aui8TransmitMessageBuff
        PUBLIC ??m_uiChannel
        PUBLIC ??m_uiFlowControl
        PUBLIC ??m_uiMeasureFlowControl
        PUBLIC ??m_uiMessageLength
        PUBLIC ??m_uiType
        PUBWEAK _A_ACSR
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADCSRB
        PUBWEAK _A_ADMUX
        PUBWEAK _A_ASSR
        PUBWEAK _A_CLKPR
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DIDR0
        PUBWEAK _A_DIDR1
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_GPIOR0
        PUBWEAK _A_GPIOR1
        PUBWEAK _A_GPIOR2
        PUBWEAK _A_GTCCR
        PUBWEAK _A_ICR1
        PUBWEAK _A_MCUCR
        PUBWEAK _A_MCUSR
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_OCR1A
        PUBWEAK _A_OCR1B
        PUBWEAK _A_OCR2A
        PUBWEAK _A_OCR2B
        PUBWEAK _A_OSCCAL
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCIFR
        PUBWEAK _A_PCMSK0
        PUBWEAK _A_PCMSK1
        PUBWEAK _A_PCMSK2
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PRR
        PUBWEAK _A_SMCR
        PUBWEAK _A_SP
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPMCSR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR1C
        PUBWEAK _A_TCCR2A
        PUBWEAK _A_TCCR2B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR0
        PUBWEAK _A_TIFR1
        PUBWEAK _A_TIFR2
        PUBWEAK _A_TIMSK0
        PUBWEAK _A_TIMSK1
        PUBWEAK _A_TIMSK2
        PUBWEAK _A_TWAMR
        PUBWEAK _A_TWAR
        PUBWEAK _A_TWBR
        PUBWEAK _A_TWCR
        PUBWEAK _A_TWDR
        PUBWEAK _A_TWSR
        PUBWEAK _A_UBRR0
        PUBWEAK _A_UCSR0A
        PUBWEAK _A_UCSR0B
        PUBWEAK _A_UCSR0C
        PUBWEAK _A_UDR0
        PUBWEAK _A_WDTCSR
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

`?<Name CSpi 8>`    SYMBOL "CSpi"
??m_bfByteIsReceived SYMBOL "m_bfByteIsReceived", `?<Name CSpi 8>`
??m_puiRxBuffer     SYMBOL "m_puiRxBuffer", `?<Name CSpi 8>`
??m_puiTxBuffer     SYMBOL "m_puiTxBuffer", `?<Name CSpi 8>`
`?<Name CMvsn21 39>` SYMBOL "CMvsn21"
??auiDiscreteInputBitData SYMBOL "auiDiscreteInputBitData", `?<Name CMvsn21 39>`
??axChipsChannelsData SYMBOL "axChipsChannelsData", `?<Name CMvsn21 39>`
??axMeasurementChannelRemap SYMBOL "axMeasurementChannelRemap", `?<Name CMvsn21 39>`
??m_aucRtuCoilsArray SYMBOL "m_aucRtuCoilsArray", `?<Name CMvsn21 39>`
??m_aucRtuDiscreteInputsArray SYMBOL "m_aucRtuDiscreteInputsArray", `?<Name CMvsn21 39>`
??m_aucRtuHoldingRegistersArray SYMBOL "m_aucRtuHoldingRegistersArray", `?<Name CMvsn21 39>`
??m_aucRtuInputRegistersArray SYMBOL "m_aucRtuInputRegistersArray", `?<Name CMvsn21 39>`
??m_aui8ReceiveMessageBuff SYMBOL "m_aui8ReceiveMessageBuff", `?<Name CMvsn21 39>`
??m_aui8TransmitMessageBuff SYMBOL "m_aui8TransmitMessageBuff", `?<Name CMvsn21 39>`
??m_uiChannel       SYMBOL "m_uiChannel", `?<Name CMvsn21 39>`
??m_uiFlowControl   SYMBOL "m_uiFlowControl", `?<Name CMvsn21 39>`
??m_uiMeasureFlowControl SYMBOL "m_uiMeasureFlowControl", `?<Name CMvsn21 39>`
??m_uiMessageLength SYMBOL "m_uiMessageLength", `?<Name CMvsn21 39>`
??m_uiType          SYMBOL "m_uiType", `?<Name CMvsn21 39>`

        EXTERN ??ChannelSelect
        EXTERN ??Disable
        EXTERN ??Enable
        EXTERN ??Exchange_1
        EXTERN ??GetMeasureValue
        EXTERN ??Int0InterruptDisable
        EXTERN ??Int0InterruptEnable
        EXTERN ??Reset_1
        EXTERN ??Start
        EXTERN ??StatusCheck
        EXTERN ??Stop
        EXTERN ??m_bfByteIsReceived
        EXTERN ??m_puiRxBuffer
        EXTERN ??m_puiTxBuffer
        EXTERN memcpy

// D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Mvsn21.cpp
//    1 //-----------------------------------------------------------------------------------------------------
//    2 //  Source      : FileName.cpp
//    3 //  Created     : 01.06.2022
//    4 //  Author      : Alexandr Volvenkin
//    5 //  email       : aav-36@mail.ru
//    6 //  GitHub      : https://github.com/AlexandrVolvenkin
//    7 //-----------------------------------------------------------------------------------------------------
//    8 
//    9 #include "Mvsn21.h"
//   10 #include "Platform.h"

        ASEGN ABSOLUTE:DATA:ROOT,0c6H
// union <unnamed> volatile __io _A_UDR0
_A_UDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c4H
// union <unnamed> volatile __io _A_UBRR0
_A_UBRR0:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,0c2H
// union <unnamed> volatile __io _A_UCSR0C
_A_UCSR0C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c1H
// union <unnamed> volatile __io _A_UCSR0B
_A_UCSR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c0H
// union <unnamed> volatile __io _A_UCSR0A
_A_UCSR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bdH
// union <unnamed> volatile __io _A_TWAMR
_A_TWAMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bcH
// union <unnamed> volatile __io _A_TWCR
_A_TWCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bbH
// union <unnamed> volatile __io _A_TWDR
_A_TWDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0baH
// union <unnamed> volatile __io _A_TWAR
_A_TWAR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b9H
// union <unnamed> volatile __io _A_TWSR
_A_TWSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b8H
// union <unnamed> volatile __io _A_TWBR
_A_TWBR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b6H
// union <unnamed> volatile __io _A_ASSR
_A_ASSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b4H
// union <unnamed> volatile __io _A_OCR2B
_A_OCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b3H
// union <unnamed> volatile __io _A_OCR2A
_A_OCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b2H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b1H
// union <unnamed> volatile __io _A_TCCR2B
_A_TCCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b0H
// union <unnamed> volatile __io _A_TCCR2A
_A_TCCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,08aH
// union <unnamed> volatile __io _A_OCR1B
_A_OCR1B:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,088H
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,086H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,084H
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,082H
// union <unnamed> volatile __io _A_TCCR1C
_A_TCCR1C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,081H
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,080H
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07fH
// union <unnamed> volatile __io _A_DIDR1
_A_DIDR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07eH
// union <unnamed> volatile __io _A_DIDR0
_A_DIDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07cH
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07bH
// union <unnamed> volatile __io _A_ADCSRB
_A_ADCSRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07aH
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,078H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,070H
// union <unnamed> volatile __io _A_TIMSK2
_A_TIMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06fH
// union <unnamed> volatile __io _A_TIMSK1
_A_TIMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06eH
// union <unnamed> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06dH
// union <unnamed> volatile __io _A_PCMSK2
_A_PCMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06cH
// union <unnamed> volatile __io _A_PCMSK1
_A_PCMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06bH
// union <unnamed> volatile __io _A_PCMSK0
_A_PCMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,069H
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,068H
// union <unnamed> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,066H
// union <unnamed> volatile __io _A_OSCCAL
_A_OSCCAL:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,064H
// union <unnamed> volatile __io _A_PRR
_A_PRR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,061H
// union <unnamed> volatile __io _A_CLKPR
_A_CLKPR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,060H
// union <unnamed> volatile __io _A_WDTCSR
_A_WDTCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05dH
// union <unnamed> volatile __io _A_SP
_A_SP:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,057H
// union <unnamed> volatile __io _A_SPMCSR
_A_SPMCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,054H
// union <unnamed> volatile __io _A_MCUSR
_A_MCUSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,053H
// union <unnamed> volatile __io _A_SMCR
_A_SMCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,050H
// union <unnamed> volatile __io _A_ACSR
_A_ACSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04cH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04bH
// union <unnamed> volatile __io _A_GPIOR2
_A_GPIOR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04aH
// union <unnamed> volatile __io _A_GPIOR1
_A_GPIOR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,048H
// union <unnamed> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,047H
// union <unnamed> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,046H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,045H
// union <unnamed> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,044H
// union <unnamed> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,043H
// union <unnamed> volatile __io _A_GTCCR
_A_GTCCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,041H
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,040H
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03fH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03eH
// union <unnamed> volatile __io _A_GPIOR0
_A_GPIOR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03dH
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03cH
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03bH
// union <unnamed> volatile __io _A_PCIFR
_A_PCIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,037H
// union <unnamed> volatile __io _A_TIFR2
_A_TIFR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,036H
// union <unnamed> volatile __io _A_TIFR1
_A_TIFR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,035H
// union <unnamed> volatile __io _A_TIFR0
_A_TIFR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02aH
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,026H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,025H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,024H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,023H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 bool CAdc::MeasureIsComlete()
??MeasureIsComlete:
        LDS     R16, _A_ADCSRA
        MOV     R17, R16
        SBRS    R17, 4
        RJMP    ??MeasureIsComlete_1
        LDS     R16, 122
        ORI     R16, 0x10
        STS     122, R16
        LDI     R16, 1
        RET
??MeasureIsComlete_1:
        LDI     R16, 0
        RET
        REQUIRE _A_ADCSRA

        RSEG CODE:CODE:NOROOT(1)
// __version_3 uint8_t CSpi::ByteIsReceived()
??ByteIsReceived:
        LDS     R16, ??m_bfByteIsReceived
        RET
//   11 #include "Crc.h"
//   12 

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   13 uint8_t CMvsn21::m_uiType;
??m_uiType:
        DS8 1
//   14 //CDriver* CMvsn21::m_pxDriver;

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   15 uint8_t CMvsn21::m_uiFlowControl;
//   16 uint16_t CMvsn21::m_uiMessageLength;
??m_uiMessageLength:
        DS8 2
??m_uiFlowControl:
        DS8 1
//   17 uint8_t CMvsn21::m_uiChannel;
//   18 uint8_t CMvsn21::m_uiMeasureFlowControl;
//   19 TChipChannelData CMvsn21::axChipsChannelsData[CHIP_NUMBER];
//   20 //CMeasurementChannel CMvsn21::axMasterMeasurementChannels[];
//   21 //CMeasurementChannel CMvsn21::axSlave1MeasurementChannels[];
//   22 //CMeasurementChannel CMvsn21::axSlave2MeasurementChannels[];
//   23 // Сопоставление входа каналу.

        RSEG NEAR_I:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//   24 __flash TChannelRemap CMvsn21::axMeasurementChannelRemap[] =
??axMeasurementChannelRemap:
        DS8 48
        REQUIRE `?<Initializer for axMeasurementChannelRemap>`

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   25 {
//   26     // Нумерация входов сверху вниз.
//   27     // разъём X1.
//   28     {0, 6},
//   29     {0, 7},
//   30     {0, 0},
//   31     {0, 1},
//   32     {0, 2},
//   33     {0, 3},
//   34     // разъём X2.
//   35     {0, 4},
//   36     {0, 5},
//   37     {1, 6},
//   38     {1, 7},
//   39     {1, 0},
//   40     {1, 1},
//   41     // разъём X3.
//   42     {1, 2},
//   43     {1, 3},
//   44     {1, 4},
//   45     {1, 5},
//   46     {2, 6},
//   47     {2, 7},
//   48     // разъём X4.
//   49     {2, 0},
//   50     {2, 1},
//   51     {2, 2},
//   52     {2, 3},
//   53     {2, 4},
//   54     {2, 5},
//   55 };
//   56 uint8_t CMvsn21::auiDiscreteInputBitData[];
//   57 
//   58 uint8_t CMvsn21::m_aucRtuCoilsArray[];
//   59 uint8_t CMvsn21::m_aucRtuDiscreteInputsArray[];
??m_aucRtuDiscreteInputsArray:
        DS8 16
??m_uiChannel:
        DS8 1
??m_uiMeasureFlowControl:
        DS8 1

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??axChipsChannelsData:
        DS8 24

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??auiDiscreteInputBitData:
        DS8 12

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??m_aucRtuCoilsArray:
        DS8 8

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   60 uint16_t CMvsn21::m_aucRtuHoldingRegistersArray[];
??m_aucRtuHoldingRegistersArray:
        DS8 16

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   61 uint16_t CMvsn21::m_aucRtuInputRegistersArray[];
??m_aucRtuInputRegistersArray:
        DS8 16

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   62 uint8_t CMvsn21::m_aui8ReceiveMessageBuff[];
??m_aui8ReceiveMessageBuff:
        DS8 32

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   63 uint8_t CMvsn21::m_aui8TransmitMessageBuff[];
??m_aui8TransmitMessageBuff:
        DS8 32
//   64 //uint8_t CMvsn21::m_auiSpiRxBuffer[];
//   65 //uint8_t CMvsn21::m_auiSpiTxBuffer[];
//   66 
//   67 ////-----------------------------------------------------------------------------------------------------
//   68 //CMvsn21::CMvsn21(uint8_t uiType, CDriver* pxDriver)// :
//   69 ////    m_uiType(uiType),
//   70 ////    m_pxDriver(pxDriver)
//   71 //{
//   72 //
//   73 //}
//   74 
//   75 ////-----------------------------------------------------------------------------------------------------
//   76 //CMvsn21::CMvsn21(uint8_t uiType)// :
//   77 ////    m_uiType(uiType),
//   78 ////    m_pxDriver(pxDriver)
//   79 //{
//   80 //
//   81 //}
//   82 //
//   83 ////-----------------------------------------------------------------------------------------------------
//   84 //CMvsn21::~CMvsn21()
//   85 //{
//   86 //    //dtor
//   87 //}
//   88 
//   89 //////-----------------------------------------------------------------------------------------------------
//   90 ////void CMvsn21::SlaveSelectInterruptEnable(void)
//   91 ////{
//   92 ////
//   93 ////}
//   94 ////
//   95 //////-----------------------------------------------------------------------------------------------------
//   96 ////void CMvsn21::SlaveSelectInterruptDisable(void)
//   97 ////{
//   98 ////
//   99 ////}
//  100 //
//  101 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  102 void CMvsn21::SpiBusExchangeEnable(void)
??SpiBusExchangeEnable:
//  103 {
//  104     CPlatform::Int0InterruptEnable();
        RCALL   ??Int0InterruptEnable
//  105     m_uiFlowControl = FSM_START;
        LDI     R16, 1
        STS     (??m_uiMessageLength + 2), R16
//  106 }
        RET
//  107 
//  108 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  109 void CMvsn21::SpiBusExchangeDisable(void)
??SpiBusExchangeDisable:
//  110 {
//  111     CPlatform::Int0InterruptDisable();
        RCALL   ??Int0InterruptDisable
//  112 }
        RET
//  113 
//  114 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  115 void CMvsn21::Reset(void)
??Reset:
//  116 {
//  117     m_uiMessageLength = 0;
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LDI     R16, 0
        ST      Z, R16
        STD     Z+1, R16
//  118     CSpi::Reset();
        RCALL   ??Reset_1
//  119 }
        RET
//  120 
//  121 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  122 uint8_t CMvsn21::Select(void)
??Select:
//  123 {
//  124     return CSpi::ByteIsReceived();
        RCALL   ??ByteIsReceived
        RET
//  125 }
//  126 
//  127 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  128 int16_t CMvsn21::Exchange(void)
??Exchange:
//  129 {
//  130     return CSpi::Exchange();
        RCALL   ??Exchange_1
        RET
//  131 }
//  132 
//  133 ////-----------------------------------------------------------------------------------------------------------------
//  134 //uint8_t CMvsn21::FrameIsReceived(void)
//  135 //{
//  136 //    return CSpi::m_bfDataExchangeIsOccur;
//  137 //};
//  138 //
//  139 ////-----------------------------------------------------------------------------------------------------------------
//  140 //uint16_t CMvsn21::GetFrameLength(void)
//  141 //{
//  142 //    return CSpi::GetFrameLength();
//  143 //}
//  144 
//  145 ////-----------------------------------------------------------------------------------------------------------------
//  146 //int8_t CMvsn21::FrameCheck(void)
//  147 //{
//  148 ////    if (CUart::m_nuiRxBuffByteCounter < _MIN_MESSAGE_LENGTH)
//  149 ////    {
//  150 ////        return 0;
//  151 ////    }
//  152 ////
//  153 ////    uint16_t uiCrc = ((static_cast<uint16_t>(m_puiRxBuffer[CUart::m_nuiRxBuffByteCounter - 2]) << 8) |
//  154 ////                      (static_cast<uint16_t>(m_puiRxBuffer[CUart::m_nuiRxBuffByteCounter - 1])));
//  155 ////
//  156 ////    if (usCrc16(m_puiRxBuffer,
//  157 ////                (CUart::m_nuiRxBuffByteCounter - _MVSN21_RTU_CHECKSUM_LENGTH)) == uiCrc)
//  158 ////    {
//  159 ////        return 1;
//  160 ////    }
//  161 ////    else
//  162 ////    {
//  163 ////        return 0;
//  164 ////    }
//  165 //}
//  166 //
//  167 ////-----------------------------------------------------------------------------------------------------------------
//  168 //int8_t CMvsn21::FrameCheck(uint8_t *puiSource, uint16_t uiLength)
//  169 //{
//  170 ////    if (uiLength < _MIN_MESSAGE_LENGTH)
//  171 ////    {
//  172 ////        return 0;
//  173 ////    }
//  174 ////
//  175 ////    uint16_t uiCrc = ((static_cast<uint16_t>(puiSource[uiLength - 2]) << 8) |
//  176 ////                      (static_cast<uint16_t>(puiSource[uiLength - 1])));
//  177 ////
//  178 ////    if (usCrc16(puiSource,
//  179 ////                (uiLength - _MVSN21_RTU_CHECKSUM_LENGTH)) == uiCrc)
//  180 ////    {
//  181 ////        return 1;
//  182 ////    }
//  183 ////    else
//  184 ////    {
//  185 ////        return 0;
//  186 ////    }
//  187 //}
//  188 
//  189 ////-----------------------------------------------------------------------------------------------------
//  190 //void CMvsn21::ChannelsToDiscreteInput(void)
//  191 //{
//  192 //    uint8_t uiLength = 0;
//  193 //    uint8_t *puiMessage = auiDiscreteInputBitData;
//  194 ////    TChannelRemap __flash *pxMeasurementChannelRemap;
//  195 ////    pxMeasurementChannelRemap = &axMeasurementChannelRemap[0];
//  196 //
//  197 //    // Протокол обмена данными по шине Spi.
//  198 //    // Первый байт - пустой.
//  199 //    puiMessage[uiLength++] = 0;
//  200 ////    // Второй байт - "эхо".
//  201 ////    puiMessage[uiLength++] = COMMAND_READ_DATA;
//  202 //    // Третий байт - команда обмен данными.
//  203 //    puiMessage[uiLength++] = COMMAND_READ_DATA;
//  204 //
//  205 //
//  206 //    // Следующие шесть байт - данные состояния дискретных входов.
//  207 //    // Упакуем двухбитовые данные состояния измерительных каналов всех чипов в дискретные входы.
//  208 //    // i - индекс дискретных входов.
//  209 //    for (int8_t i = 0; i < DISCRETE_INPUT_NUMBER; )
//  210 //    {
//  211 //        puiMessage[uiLength] = 0;
//  212 ////        // Упакуем двухбитовые данные состояния восьми измерительных каналов одного чипа в дискретные входы.
//  213 //        // Упакуем двухбитовые данные состояния четырёх измерительных каналов в байт по четыре дискретных входа.
//  214 //        for (int8_t j= 0;
//  215 //                j < (CHANNELS_IN_BYTE * MEASURE_CHANNEL_STATE_BIT_NUMBER);
//  216 //                j += MEASURE_CHANNEL_STATE_BIT_NUMBER)
//  217 //        {
//  218 //            // Упаковали все данные состояния измерительных каналов?
//  219 //            if (i < DISCRETE_INPUT_NUMBER)
//  220 //            {
//  221 //                // Отобразим данные состояния измерительных каналов на дискретные входы во временный буфер.
//  222 //                puiMessage[uiLength] |=
//  223 //                    // Следующие два бита в байте.
//  224 //                    // Выберем канал по индексу чипа, карты сопоставления измерительных каналов со входами модуля.
//  225 //                    ((axChipsChannelsData[axMeasurementChannelRemap[i].uiChip].
//  226 //                      // Выберем канал по индексу входа модуля, карты сопоставления измерительных каналов со входами модуля.
//  227 //                      axMeasurementChannels[axMeasurementChannelRemap[i].uiChannel].
//  228 //                      // Состояние измерительного канала занимает два младших бита.
//  229 //                      m_uiState & 0x03) << j);
//  230 //                // Следующий дискретный вход.
//  231 //                i++;
//  232 //            }
//  233 //            else
//  234 //            {
//  235 //                // Упаковали все данные состояния измерительных каналов.
//  236 //                goto EndStateDataPack;
//  237 //            }
//  238 //        }
//  239 //        // Следующий байт.
//  240 //        uiLength++;
//  241 //        puiMessage[uiLength] = 0;
//  242 //    }
//  243 //
//  244 //EndStateDataPack:
//  245 //
//  246 //    // Последний байт - сумма всех байт начиная с третьего(пустой байт и "эхо" не учитываются).
//  247 //    puiMessage[uiLength] =
//  248 //        usCrcSummOneByteCalculation(&puiMessage[2], (uiLength - 2));
//  249 //}
//  250 
//  251 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  252 int16_t CMvsn21::ReportType(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiLength)
??ReportType:
//  253 {
//  254 //    *(puiResponse - 1) = 4;
//  255 //    puiResponse[0] = 2;
//  256     uint8_t uiCrc = (COMMAND_REPORT_TYPE + MODULE_TYPE_MVSN21);
//  257 //    puiResponse[uiLength++] = 0;
//  258     puiResponse[uiLength++] = COMMAND_REPORT_TYPE;
        MOVW    R31:R30, R19:R18
        ADD     R30, R20
        ADC     R31, R21
        LDI     R16, 145
        ST      Z, R16
//  259     puiResponse[uiLength++] = MODULE_TYPE_MVSN21;
        SUBI    R20, 255
        SBCI    R21, 255
        MOVW    R31:R30, R19:R18
        ADD     R30, R20
        ADC     R31, R21
        LDI     R16, 1
        ST      Z, R16
//  260     puiResponse[uiLength++] = uiCrc;
        SUBI    R20, 255
        SBCI    R21, 255
        ADD     R18, R20
        ADC     R19, R21
        MOVW    R31:R30, R19:R18
        LDI     R16, 146
        ST      Z, R16
//  261 
//  262     return uiLength;
        SUBI    R20, 255
        SBCI    R21, 255
        MOVW    R17:R16, R21:R20
        RET
//  263 }
//  264 
//  265 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  266 int16_t CMvsn21::ReadData(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiLength)
??ReadData:
//  267 {
        RCALL   ?PROLOGUE2_L09
        MOVW    R17:R16, R19:R18
        MOVW    R25:R24, R21:R20
//  268 //    // Закончено измерение входных каналов?
//  269 //    if (m_uiMeasureFlowControl == FSM_IDDLE)
//  270 //    {
//  271     memcpy(puiResponse, auiDiscreteInputBitData, 10);
        LDI     R20, 10
        LDI     R21, 0
        LDI     R18, LOW(??auiDiscreteInputBitData)
        LDI     R19, (??auiDiscreteInputBitData) >> 8
        RCALL   memcpy
//  272 //    }
//  273 //    else
//  274 //    {
//  275 //        // Протокол обмена данными по шине Spi.
//  276 //        // Первый байт - пустой.
//  277 //        puiResponse[uiLength++] = 0;
//  278 //        // Второй байт - "эхо".
//  279 //        puiResponse[uiLength++] = COMMAND_DATA_NOT_READY;
//  280 //        // Третий байт - команда обмен данными.
//  281 //        puiResponse[uiLength++] = COMMAND_DATA_NOT_READY;
//  282 //
//  283 //
//  284 ////    // Последний байт - сумма всех байт начиная с третьего(пустой байт и "эхо" не учитываются).
//  285 ////    puiMessage[uiLength] =
//  286 ////        usCrcSummOneByteCalculation(&puiMessage[2], (uiLength - 2));
//  287 //    }
//  288     return uiLength;
        MOVW    R17:R16, R25:R24
        LDI     R30, 2
        RJMP    ?EPILOGUE_B2_L09
//  289 }
//  290 
//  291 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  292 int16_t CMvsn21::SpiReply(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiFrameLength)
??SpiReply:
//  293 {
//  294     uint16_t uiLength = uiFrameLength;
//  295     // Какой поступил запрос?
//  296     switch (puiRequest[0])
        MOVW    R31:R30, R17:R16
        LD      R22, Z
        SUBI    R22, 145
        BREQ    ??SpiReply_1
        SUBI    R22, 177
        BREQ    ??SpiReply_2
        RJMP    ??SpiReply_3
//  297     {
//  298     case COMMAND_REPORT_TYPE:
//  299         uiLength = ReportType(puiRequest, puiResponse, uiLength);
??SpiReply_1:
        RCALL   ??ReportType
        RJMP    ??SpiReply_4
//  300         break;
//  301 
//  302     case COMMAND_READ_DATA:
//  303         uiLength = ReadData(puiRequest, puiResponse, uiLength);
??SpiReply_2:
        RCALL   ??ReadData
??SpiReply_4:
        MOVW    R21:R20, R17:R16
//  304         break;
//  305 
//  306     case COMMAND_READ_DATA_BASE:
//  307 //        uiLength = ReadHoldingRegisters(puiRequest, puiResponse, uiLength);
//  308         break;
//  309 
//  310     case COMMAND_WRITE_DATA_BASE:
//  311 //        uiLength = ReadInputRegisters(puiRequest, puiResponse, uiLength);
//  312         break;
//  313 
//  314     default:
//  315         break;
//  316     }
//  317     return uiLength;
??SpiReply_3:
        MOVW    R17:R16, R21:R20
        RET
//  318 }
//  319 
//  320 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  321 void CMvsn21::SpiFsm(void)
??SpiFsm:
//  322 {
        RCALL   ?PROLOGUE4_L09
//  323     int16_t iReceivedCounter;
//  324 
//  325     switch (m_uiFlowControl)
        LDI     R26, LOW(??m_uiMessageLength)
        LDI     R27, (??m_uiMessageLength) >> 8
        LDS     R16, (??m_uiMessageLength + 2)
        SUBI    R16, 1
        BREQ    ??SpiFsm_1
        DEC     R16
        BREQ    ??SpiFsm_2
        RJMP    ??SpiFsm_3
//  326     {
//  327     case FSM_IDDLE:
//  328         break;
//  329 
//  330     case FSM_START:
//  331         Reset();
??SpiFsm_1:
        RCALL   ??Reset
//  332         m_uiFlowControl = FSM_WAITING_MESSAGE;
        LDI     R16, 2
        RJMP    ??SpiFsm_4
//  333         break;
//  334 
//  335     case FSM_WAITING_MESSAGE:
//  336         if (Select())
??SpiFsm_2:
        RCALL   ??Select
        TST     R16
        BREQ    ??SpiFsm_3
//  337         {
//  338             iReceivedCounter = Exchange();
        RCALL   ??Exchange
//  339 
//  340             if (iReceivedCounter > 0)
        CPI     R16, 1
        LDI     R18, 0
        CPC     R17, R18
        BRLT    ??SpiFsm_5
//  341             {
//  342                 m_uiMessageLength += iReceivedCounter;
        LD      R18, X+
        LD      R19, X
        ADD     R18, R16
        ADC     R19, R17
        ST      X, R19
        ST      -X, R18
//  343 
//  344                 if (SpiReply(CSpi::m_puiRxBuffer, CSpi::m_puiTxBuffer, m_uiMessageLength))
        LD      R20, X+
        LD      R21, X
        LDI     R30, LOW(??m_puiTxBuffer)
        LDI     R31, (??m_puiTxBuffer) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RCALL   ??SpiReply
        OR      R16, R17
        BREQ    ??SpiFsm_6
//  345                 {
//  346                     m_uiFlowControl = FSM_DATA_EXCHANGE_END_WAITING;
        LDI     R16, 9
        RJMP    ??SpiFsm_4
//  347                 }
//  348                 else
//  349                 {
//  350                     m_uiFlowControl = FSM_IDDLE;
//  351                 }
//  352             }
//  353             else if (iReceivedCounter == -1)
??SpiFsm_5:
        CPI     R16, 255
        SBCI    R17, 255
        BRNE    ??SpiFsm_3
//  354             {
//  355                 m_uiFlowControl = FSM_IDDLE;
??SpiFsm_6:
        LDI     R16, 0
??SpiFsm_4:
        STS     (??m_uiMessageLength + 2), R16
//  356             }
//  357         }
//  358 
//  359         break;
//  360 
//  361     case FSM_DATA_EXCHANGE_END_WAITING:
//  362 
//  363         break;
//  364 
//  365     default:
//  366         break;
//  367     }
//  368 
//  369 }
??SpiFsm_3:
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//  370 
//  371 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  372 void CMvsn21::MeasureFsm(void)
??MeasureFsm:
//  373 {
        LDS     R16, (??m_aucRtuDiscreteInputsArray + 17)
        SUBI    R16, 1
        BREQ    ??MeasureFsm_1
        SUBI    R16, 9
        BREQ    ??MeasureFsm_2
        RET
//  374     switch (m_uiMeasureFlowControl)
//  375     {
//  376     case FSM_IDDLE:
//  377         break;
//  378 
//  379     case FSM_START:
//  380         m_uiChannel = 0;
??MeasureFsm_1:
        LDI     R16, 0
        STS     (??m_aucRtuDiscreteInputsArray + 16), R16
//  381         CAdc::ChannelSelect(m_uiChannel);
        RCALL   ??ChannelSelect
//  382         CAdc::Enable();
        RCALL   ??Enable
//  383         CAdc::Start();
        RCALL   ??Start
//  384         m_uiMeasureFlowControl = FSM_CONTINUOUS_MEASURE;
        LDI     R16, 10
        STS     (??m_aucRtuDiscreteInputsArray + 17), R16
//  385         break;
        RET
//  386 
//  387     case FSM_CONTINUOUS_MEASURE:
//  388         if (CAdc::MeasureIsComlete())
??MeasureFsm_2:
        RCALL   ??MeasureIsComlete
        TST     R16
        BREQ    ??MeasureFsm_3
//  389         {
//  390 //            uint16_t uiData = CAdc::GetMeasureValue();
//  391 //            axChipsChannelsData[MASTER_CHIP_ADDRESS].axMeasurementChannels[m_uiChannel].m_uiState =
//  392 //                CMeasurementChannel::StatusCheck(CAdc::GetMeasureValue());
//  393             uint8_t uiState =
//  394                 CMeasurementChannel::StatusCheck(CAdc::GetMeasureValue());
        RCALL   ??GetMeasureValue
        RCALL   ??StatusCheck
//  395             m_aucRtuDiscreteInputsArray[m_uiChannel * 2] = (uiState & 0x01);
        LDS     R17, (??m_aucRtuDiscreteInputsArray + 16)
        LDI     R18, 2
        MUL     R17, R18
        LDI     R30, LOW(??m_aucRtuDiscreteInputsArray)
        LDI     R31, (??m_aucRtuDiscreteInputsArray) >> 8
        ADD     R30, R0
        ADC     R31, R1
        MOV     R17, R16
        ANDI    R17, 0x01
        ST      Z, R17
//  396             m_aucRtuDiscreteInputsArray[(m_uiChannel * 2) + 1] = ((uiState >> 1) & 0x01);
        MOV     R17, R16
        BST     R17, 1
        LDI     R17, 0
        BLD     R17, 0
        STD     Z+1, R17
//  397 
//  398             m_uiChannel++;
        LDS     R16, (??m_aucRtuDiscreteInputsArray + 16)
        INC     R16
        STS     (??m_aucRtuDiscreteInputsArray + 16), R16
//  399             if (m_uiChannel < MEASURE_CHANNEL_NUMBER)
        LDS     R16, (??m_aucRtuDiscreteInputsArray + 16)
        CPI     R16, 8
        BRCC    ??MeasureFsm_4
//  400             {
//  401                 CAdc::Stop();
        RCALL   ??Stop
//  402                 CAdc::ChannelSelect(m_uiChannel);
        LDS     R16, (??m_aucRtuDiscreteInputsArray + 16)
        RCALL   ??ChannelSelect
//  403                 CAdc::Start();
        RCALL   ??Start
        RET
//  404             }
//  405             else
//  406             {
//  407                 CAdc::Disable();
??MeasureFsm_4:
        RCALL   ??Disable
//  408 //                ChannelsToDiscreteInput();
//  409                 m_uiMeasureFlowControl = FSM_IDDLE;
        LDI     R16, 0
        STS     (??m_aucRtuDiscreteInputsArray + 17), R16
//  410             }
//  411         }
//  412         break;
//  413 
//  414     default:
//  415         break;
//  416     }
//  417 }
??MeasureFsm_3:
        RET

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:ROOT(0)
`?<Initializer for axMeasurementChannelRemap>`:
        DC8 0, 6, 0, 7, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 1, 6, 1, 7, 1, 0, 1
        DC8 1, 1, 2, 1, 3, 1, 4, 1, 5, 2, 6, 2, 7, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4
        DC8 2, 5

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        END
//  418 
//  419 
//  420 
//  421 
//  422 
//  423 
//  424 
//  425 ////-----------------------------------------------------------------------------------------------------
//  426 //CMvsn21Driver::CMvsn21Driver(uint8_t uiType) :
//  427 //
//  428 //    m_uiType(uiType),
//  429 //{
//  430 //
//  431 //}
//  432 //
//  433 ////-----------------------------------------------------------------------------------------------------
//  434 //CMvsn21Driver::~CMvsn21Driver()
//  435 //{
//  436 //
//  437 //}
//  438 //
//  439 ////-----------------------------------------------------------------------------------------------------
//  440 //uint16_t CMvsn21Driver::TypeReport(uint8_t *puiDestination, uint16_t uiLength)
//  441 //{
//  442 //
//  443 //}
// 
//  87 bytes in segment ABSOLUTE
// 380 bytes in segment CODE
//  12 bytes in segment INITTAB
//  48 bytes in segment NEAR_I
//  48 bytes in segment NEAR_ID
// 162 bytes in segment NEAR_Z
// 
// 394 bytes of CODE memory (+ 46 bytes shared)
// 210 bytes of DATA memory (+ 87 bytes shared)
//
//Errors: none
//Warnings: 2
