///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR          22/May/2022  19:38:06
// Copyright 1996-2018 IAR Systems AB.
//
//    Source file  =  D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Mvsn21.cpp
//    Command line =  
//        -f C:\Users\ghost\AppData\Local\Temp\EWA433.tmp
//        (--string_literals_in_flash
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Mvsn21.cpp --cpu=m48 -ms
//        -o D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\Obj -lB
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\List
//        --initializers_in_flash --root_variables --debug
//        -DENABLE_BIT_DEFINITIONS -e -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\include\ -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Modbus\ --eeprom_size 256
//        --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
//        Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Ohz --eec++)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\List\Mvsn21.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME Mvsn21

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC ??ChannelsToDiscreteInput
        PUBLIC ??MeasureFsm
        PUBLIC ??ReadData
        PUBLIC ??ReportType
        PUBLIC ??SpiBusExchangeEnable
        PUBLIC ??SpiFsm
        PUBLIC ??SpiReply
        PUBLIC ??m_aucRtuDiscreteInputsArray
        PUBLIC ??m_aui8ReceiveMessageBuff
        PUBLIC ??m_aui8TransmitMessageBuff
        PUBLIC ??m_axMeasurementChannelRemap
        PUBLIC ??m_uiChannel
        PUBLIC ??m_uiFlowControl
        PUBLIC ??m_uiMeasureFlowControl
        PUBLIC ??m_uiMessageLength
        PUBLIC ??m_uiType
        PUBWEAK _A_ACSR
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADCSRB
        PUBWEAK _A_ADMUX
        PUBWEAK _A_ASSR
        PUBWEAK _A_CLKPR
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DIDR0
        PUBWEAK _A_DIDR1
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_GPIOR0
        PUBWEAK _A_GPIOR1
        PUBWEAK _A_GPIOR2
        PUBWEAK _A_GTCCR
        PUBWEAK _A_ICR1
        PUBWEAK _A_MCUCR
        PUBWEAK _A_MCUSR
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_OCR1A
        PUBWEAK _A_OCR1B
        PUBWEAK _A_OCR2A
        PUBWEAK _A_OCR2B
        PUBWEAK _A_OSCCAL
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCIFR
        PUBWEAK _A_PCMSK0
        PUBWEAK _A_PCMSK1
        PUBWEAK _A_PCMSK2
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PRR
        PUBWEAK _A_SMCR
        PUBWEAK _A_SP
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPMCSR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR1C
        PUBWEAK _A_TCCR2A
        PUBWEAK _A_TCCR2B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR0
        PUBWEAK _A_TIFR1
        PUBWEAK _A_TIFR2
        PUBWEAK _A_TIMSK0
        PUBWEAK _A_TIMSK1
        PUBWEAK _A_TIMSK2
        PUBWEAK _A_TWAMR
        PUBWEAK _A_TWAR
        PUBWEAK _A_TWBR
        PUBWEAK _A_TWCR
        PUBWEAK _A_TWDR
        PUBWEAK _A_TWSR
        PUBWEAK _A_UBRR0
        PUBWEAK _A_UCSR0A
        PUBWEAK _A_UCSR0B
        PUBWEAK _A_UCSR0C
        PUBWEAK _A_UDR0
        PUBWEAK _A_WDTCSR
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

`?<Name CSpi 8>`    SYMBOL "CSpi"
`?<Name CModbus 21>` SYMBOL "CModbus"
??m_bfByteIsReceived SYMBOL "m_bfByteIsReceived", `?<Name CSpi 8>`
??m_puiRxBuffer     SYMBOL "m_puiRxBuffer", `?<Name CSpi 8>`
??m_puiTxBuffer     SYMBOL "m_puiTxBuffer", `?<Name CSpi 8>`
??m_uiSlaveAddress  SYMBOL "m_uiSlaveAddress", `?<Name CModbus 21>`
`?<Name CMvsn21 41>` SYMBOL "CMvsn21"
??m_aucRtuDiscreteInputsArray SYMBOL "m_aucRtuDiscreteInputsArray", `?<Name CMvsn21 41>`
??m_aui8ReceiveMessageBuff SYMBOL "m_aui8ReceiveMessageBuff", `?<Name CMvsn21 41>`
??m_aui8TransmitMessageBuff SYMBOL "m_aui8TransmitMessageBuff", `?<Name CMvsn21 41>`
??m_axMeasurementChannelRemap SYMBOL "m_axMeasurementChannelRemap", `?<Name CMvsn21 41>`
??m_uiChannel       SYMBOL "m_uiChannel", `?<Name CMvsn21 41>`
??m_uiFlowControl   SYMBOL "m_uiFlowControl", `?<Name CMvsn21 41>`
??m_uiMeasureFlowControl SYMBOL "m_uiMeasureFlowControl", `?<Name CMvsn21 41>`
??m_uiMessageLength SYMBOL "m_uiMessageLength", `?<Name CMvsn21 41>`
??m_uiType          SYMBOL "m_uiType", `?<Name CMvsn21 41>`

        EXTERN ??ChannelSelect
        EXTERN ??Disable
        EXTERN ??Enable
        EXTERN ??Exchange
        EXTERN ??GetMeasureValue
        EXTERN ??Int0InterruptEnable
        EXTERN ??ReadDiscreteInputsRequest
        EXTERN ??Reset
        EXTERN ??Start
        EXTERN ??StatusCheck
        EXTERN ??Stop
        EXTERN ??m_bfByteIsReceived
        EXTERN ??m_puiRxBuffer
        EXTERN ??m_puiTxBuffer
        EXTERN ??m_uiSlaveAddress
        EXTERN ??usCrcSummOneByteCalculation

// D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Mvsn21.cpp
//    1 //-----------------------------------------------------------------------------------------------------
//    2 //  Source      : FileName.cpp
//    3 //  Created     : 01.06.2022
//    4 //  Author      : Alexandr Volvenkin
//    5 //  email       : aav-36@mail.ru
//    6 //  GitHub      : https://github.com/AlexandrVolvenkin
//    7 //-----------------------------------------------------------------------------------------------------
//    8 
//    9 #include "Mvsn21.h"
//   10 #include "Platform.h"

        ASEGN ABSOLUTE:DATA:ROOT,0c6H
// union <unnamed> volatile __io _A_UDR0
_A_UDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c4H
// union <unnamed> volatile __io _A_UBRR0
_A_UBRR0:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,0c2H
// union <unnamed> volatile __io _A_UCSR0C
_A_UCSR0C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c1H
// union <unnamed> volatile __io _A_UCSR0B
_A_UCSR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c0H
// union <unnamed> volatile __io _A_UCSR0A
_A_UCSR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bdH
// union <unnamed> volatile __io _A_TWAMR
_A_TWAMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bcH
// union <unnamed> volatile __io _A_TWCR
_A_TWCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bbH
// union <unnamed> volatile __io _A_TWDR
_A_TWDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0baH
// union <unnamed> volatile __io _A_TWAR
_A_TWAR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b9H
// union <unnamed> volatile __io _A_TWSR
_A_TWSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b8H
// union <unnamed> volatile __io _A_TWBR
_A_TWBR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b6H
// union <unnamed> volatile __io _A_ASSR
_A_ASSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b4H
// union <unnamed> volatile __io _A_OCR2B
_A_OCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b3H
// union <unnamed> volatile __io _A_OCR2A
_A_OCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b2H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b1H
// union <unnamed> volatile __io _A_TCCR2B
_A_TCCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b0H
// union <unnamed> volatile __io _A_TCCR2A
_A_TCCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,08aH
// union <unnamed> volatile __io _A_OCR1B
_A_OCR1B:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,088H
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,086H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,084H
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,082H
// union <unnamed> volatile __io _A_TCCR1C
_A_TCCR1C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,081H
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,080H
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07fH
// union <unnamed> volatile __io _A_DIDR1
_A_DIDR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07eH
// union <unnamed> volatile __io _A_DIDR0
_A_DIDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07cH
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07bH
// union <unnamed> volatile __io _A_ADCSRB
_A_ADCSRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07aH
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,078H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,070H
// union <unnamed> volatile __io _A_TIMSK2
_A_TIMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06fH
// union <unnamed> volatile __io _A_TIMSK1
_A_TIMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06eH
// union <unnamed> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06dH
// union <unnamed> volatile __io _A_PCMSK2
_A_PCMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06cH
// union <unnamed> volatile __io _A_PCMSK1
_A_PCMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06bH
// union <unnamed> volatile __io _A_PCMSK0
_A_PCMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,069H
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,068H
// union <unnamed> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,066H
// union <unnamed> volatile __io _A_OSCCAL
_A_OSCCAL:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,064H
// union <unnamed> volatile __io _A_PRR
_A_PRR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,061H
// union <unnamed> volatile __io _A_CLKPR
_A_CLKPR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,060H
// union <unnamed> volatile __io _A_WDTCSR
_A_WDTCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05dH
// union <unnamed> volatile __io _A_SP
_A_SP:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,057H
// union <unnamed> volatile __io _A_SPMCSR
_A_SPMCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,054H
// union <unnamed> volatile __io _A_MCUSR
_A_MCUSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,053H
// union <unnamed> volatile __io _A_SMCR
_A_SMCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,050H
// union <unnamed> volatile __io _A_ACSR
_A_ACSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04cH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04bH
// union <unnamed> volatile __io _A_GPIOR2
_A_GPIOR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04aH
// union <unnamed> volatile __io _A_GPIOR1
_A_GPIOR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,048H
// union <unnamed> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,047H
// union <unnamed> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,046H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,045H
// union <unnamed> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,044H
// union <unnamed> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,043H
// union <unnamed> volatile __io _A_GTCCR
_A_GTCCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,041H
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,040H
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03fH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03eH
// union <unnamed> volatile __io _A_GPIOR0
_A_GPIOR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03dH
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03cH
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03bH
// union <unnamed> volatile __io _A_PCIFR
_A_PCIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,037H
// union <unnamed> volatile __io _A_TIFR2
_A_TIFR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,036H
// union <unnamed> volatile __io _A_TIFR1
_A_TIFR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,035H
// union <unnamed> volatile __io _A_TIFR0
_A_TIFR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02aH
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,026H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,025H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,024H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,023H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS8 1
//   11 #include "Crc.h"
//   12 #include "Modbus.h"
//   13 

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   14 uint8_t CMvsn21::m_uiType;
??m_uiType:
        DS8 1
//   15 //CDriver* CMvsn21::m_pxDriver;

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   16 uint8_t CMvsn21::m_uiFlowControl;
//   17 uint16_t CMvsn21::m_uiMessageLength;
??m_uiMessageLength:
        DS8 2
??m_uiFlowControl:
        DS8 1

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   18 uint8_t CMvsn21::m_uiChannel;
??m_uiChannel:
        DS8 1
//   19 uint8_t CMvsn21::m_uiMeasureFlowControl;
??m_uiMeasureFlowControl:
        DS8 1
//   20 //TChipChannelData CMvsn21::axChipsChannelsData[CHIP_NUMBER];
//   21 //CMeasurementChannel CMvsn21::axMasterMeasurementChannels[];
//   22 //CMeasurementChannel CMvsn21::axSlave1MeasurementChannels[];
//   23 //CMeasurementChannel CMvsn21::axSlave2MeasurementChannels[];
//   24 // Сопоставление входа каналу.

        RSEG NEAR_I:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//   25 __flash TChannelRemap CMvsn21::m_axMeasurementChannelRemap[] =
??m_axMeasurementChannelRemap:
        DS8 48
        REQUIRE `?<Initializer for m_axMeasurementChannelRemap>`
//   26 {
//   27     // Нумерация входов сверху вниз.
//   28     // разъём X1.
//   29     {0, 6},
//   30     {0, 7},
//   31     {0, 0},
//   32     {0, 1},
//   33     {0, 2},
//   34     {0, 3},
//   35     // разъём X2.
//   36     {0, 4},
//   37     {0, 5},
//   38     {1, 6},
//   39     {1, 7},
//   40     {1, 0},
//   41     {1, 1},
//   42     // разъём X3.
//   43     {1, 2},
//   44     {1, 3},
//   45     {1, 4},
//   46     {1, 5},
//   47     {2, 6},
//   48     {2, 7},
//   49     // разъём X4.
//   50     {2, 0},
//   51     {2, 1},
//   52     {2, 2},
//   53     {2, 3},
//   54     {2, 4},
//   55     {2, 5},
//   56 };
//   57 //uint8_t CMvsn21::auiDiscreteInputBitData[];
//   58 
//   59 //uint8_t CMvsn21::m_aucRtuCoilsArray[];

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   60 uint8_t CMvsn21::m_aucRtuDiscreteInputsArray[];
??m_aucRtuDiscreteInputsArray:
        DS8 48
//   61 //uint16_t CMvsn21::m_aucRtuHoldingRegistersArray[];
//   62 //uint16_t CMvsn21::m_aucRtuInputRegistersArray[];

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   63 uint8_t CMvsn21::m_aui8ReceiveMessageBuff[];
??m_aui8ReceiveMessageBuff:
        DS8 32

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   64 uint8_t CMvsn21::m_aui8TransmitMessageBuff[];
??m_aui8TransmitMessageBuff:
        DS8 32
//   65 //uint8_t CMvsn21::m_auiSpiRxBuffer[];
//   66 //uint8_t CMvsn21::m_auiSpiTxBuffer[];
//   67 
//   68 ////-----------------------------------------------------------------------------------------------------
//   69 //CMvsn21::CMvsn21(uint8_t uiType, CDriver* pxDriver)// :
//   70 ////    m_uiType(uiType),
//   71 ////    m_pxDriver(pxDriver)
//   72 //{
//   73 //
//   74 //}
//   75 
//   76 ////-----------------------------------------------------------------------------------------------------
//   77 //CMvsn21::CMvsn21(uint8_t uiType)// :
//   78 ////    m_uiType(uiType),
//   79 ////    m_pxDriver(pxDriver)
//   80 //{
//   81 //
//   82 //}
//   83 //
//   84 ////-----------------------------------------------------------------------------------------------------
//   85 //CMvsn21::~CMvsn21()
//   86 //{
//   87 //    //dtor
//   88 //}
//   89 
//   90 //////-----------------------------------------------------------------------------------------------------
//   91 ////void CMvsn21::SlaveSelectInterruptEnable(void)
//   92 ////{
//   93 ////
//   94 ////}
//   95 ////
//   96 //////-----------------------------------------------------------------------------------------------------
//   97 ////void CMvsn21::SlaveSelectInterruptDisable(void)
//   98 ////{
//   99 ////
//  100 ////}
//  101 //
//  102 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  103 void CMvsn21::SpiBusExchangeEnable(void)
??SpiBusExchangeEnable:
//  104 {
//  105     CPlatform::Int0InterruptEnable();
        RCALL   ??Int0InterruptEnable
//  106     m_uiFlowControl = FSM_START;
        LDI     R16, 1
        STS     (??m_uiMessageLength + 2), R16
//  107 }
        RET
//  108 
//  109 ////-----------------------------------------------------------------------------------------------------
//  110 //void CMvsn21::SpiBusExchangeDisable(void)
//  111 //{
//  112 //    CPlatform::Int0InterruptDisable();
//  113 //}
//  114 
//  115 ////-----------------------------------------------------------------------------------------------------
//  116 //void CMvsn21::Reset(void)
//  117 //{
//  118 //    CSpi::Reset();
//  119 //}
//  120 
//  121 ////-----------------------------------------------------------------------------------------------------
//  122 //uint8_t CMvsn21::Select(void)
//  123 //{
//  124 //    return CSpi::ByteIsReceived();
//  125 //}
//  126 
//  127 ////-----------------------------------------------------------------------------------------------------
//  128 //int16_t CMvsn21::Exchange(void)
//  129 //{
//  130 //    return CSpi::Exchange();
//  131 //}
//  132 
//  133 ////-----------------------------------------------------------------------------------------------------------------
//  134 //uint8_t CMvsn21::FrameIsReceived(void)
//  135 //{
//  136 //    return CSpi::m_bfDataExchangeIsOccur;
//  137 //};
//  138 //
//  139 ////-----------------------------------------------------------------------------------------------------------------
//  140 //uint16_t CMvsn21::GetFrameLength(void)
//  141 //{
//  142 //    return CSpi::GetFrameLength();
//  143 //}
//  144 
//  145 ////-----------------------------------------------------------------------------------------------------------------
//  146 //int8_t CMvsn21::FrameCheck(void)
//  147 //{
//  148 ////    if (CUart::m_nuiRxBuffByteCounter < _MIN_MESSAGE_LENGTH)
//  149 ////    {
//  150 ////        return 0;
//  151 ////    }
//  152 ////
//  153 ////    uint16_t uiCrc = ((static_cast<uint16_t>(m_puiRxBuffer[CUart::m_nuiRxBuffByteCounter - 2]) << 8) |
//  154 ////                      (static_cast<uint16_t>(m_puiRxBuffer[CUart::m_nuiRxBuffByteCounter - 1])));
//  155 ////
//  156 ////    if (usCrc16(m_puiRxBuffer,
//  157 ////                (CUart::m_nuiRxBuffByteCounter - _MVSN21_RTU_CHECKSUM_LENGTH)) == uiCrc)
//  158 ////    {
//  159 ////        return 1;
//  160 ////    }
//  161 ////    else
//  162 ////    {
//  163 ////        return 0;
//  164 ////    }
//  165 //}
//  166 //
//  167 ////-----------------------------------------------------------------------------------------------------------------
//  168 //int8_t CMvsn21::FrameCheck(uint8_t *puiSource, uint16_t uiLength)
//  169 //{
//  170 ////    if (uiLength < _MIN_MESSAGE_LENGTH)
//  171 ////    {
//  172 ////        return 0;
//  173 ////    }
//  174 ////
//  175 ////    uint16_t uiCrc = ((static_cast<uint16_t>(puiSource[uiLength - 2]) << 8) |
//  176 ////                      (static_cast<uint16_t>(puiSource[uiLength - 1])));
//  177 ////
//  178 ////    if (usCrc16(puiSource,
//  179 ////                (uiLength - _MVSN21_RTU_CHECKSUM_LENGTH)) == uiCrc)
//  180 ////    {
//  181 ////        return 1;
//  182 ////    }
//  183 ////    else
//  184 ////    {
//  185 ////        return 0;
//  186 ////    }
//  187 //}
//  188 
//  189 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  190 void CMvsn21::ChannelsToDiscreteInput(void)
??ChannelsToDiscreteInput:
//  191 {
//  192 //    uint8_t uiLength = 0;
//  193 //    uint8_t *puiMessage = auiDiscreteInputBitData;
//  194 ////    TChannelRemap __flash *pxMeasurementChannelRemap;
//  195 ////    pxMeasurementChannelRemap = &m_axMeasurementChannelRemap[0];
//  196 //
//  197 //    // Протокол обмена данными по шине Spi.
//  198 //    // Первый байт - пустой.
//  199 //    puiMessage[uiLength++] = 0;
//  200 ////    // Второй байт - "эхо".
//  201 ////    puiMessage[uiLength++] = COMMAND_READ_DATA;
//  202 //    // Третий байт - команда обмен данными.
//  203 //    puiMessage[uiLength++] = COMMAND_READ_DATA;
//  204 //
//  205 //
//  206 //    // Следующие шесть байт - данные состояния дискретных входов.
//  207 //    // Упакуем двухбитовые данные состояния измерительных каналов всех чипов в дискретные входы.
//  208 //    // i - индекс дискретных входов.
//  209 //    for (int8_t i = 0; i < DISCRETE_INPUT_NUMBER; )
//  210 //    {
//  211 //        puiMessage[uiLength] = 0;
//  212 ////        // Упакуем двухбитовые данные состояния восьми измерительных каналов одного чипа в дискретные входы.
//  213 //        // Упакуем двухбитовые данные состояния четырёх измерительных каналов в байт по четыре дискретных входа.
//  214 //        for (int8_t j= 0;
//  215 //                j < (CHANNELS_IN_BYTE * MEASURE_CHANNEL_STATE_BIT_NUMBER);
//  216 //                j += MEASURE_CHANNEL_STATE_BIT_NUMBER)
//  217 //        {
//  218 //            // Упаковали все данные состояния измерительных каналов?
//  219 //            if (i < DISCRETE_INPUT_NUMBER)
//  220 //            {
//  221 //                // Отобразим данные состояния измерительных каналов на дискретные входы во временный буфер.
//  222 //                puiMessage[uiLength] |=
//  223 //                    // Следующие два бита в байте.
//  224 //                    // Выберем канал по индексу чипа, карты сопоставления измерительных каналов со входами модуля.
//  225 //                    ((axChipsChannelsData[m_axMeasurementChannelRemap[i].uiChip].
//  226 //                      // Выберем канал по индексу входа модуля, карты сопоставления измерительных каналов со входами модуля.
//  227 //                      axMeasurementChannels[m_axMeasurementChannelRemap[i].uiChannel].
//  228 //                      // Состояние измерительного канала занимает два младших бита.
//  229 //                      uiState & 0x03) << j);
//  230 //                // Следующий дискретный вход.
//  231 //                i++;
//  232 //            }
//  233 //            else
//  234 //            {
//  235 //                // Упаковали все данные состояния измерительных каналов.
//  236 //                goto EndStateDataPack;
//  237 //            }
//  238 //        }
//  239 //        // Следующий байт.
//  240 //        uiLength++;
//  241 //        puiMessage[uiLength] = 0;
//  242 //    }
//  243 //
//  244 //EndStateDataPack:
//  245 //
//  246 //    // Последний байт - сумма всех байт начиная с третьего(пустой байт и "эхо" не учитываются).
//  247 //    puiMessage[uiLength] =
//  248 //        usCrcSummOneByteCalculation(&puiMessage[2], (uiLength - 2));
//  249 }
        RET
//  250 
//  251 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  252 int16_t CMvsn21::ReportType(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiLength)
??ReportType:
//  253 {
//  254 //    *(puiResponse - 1) = 4;
//  255 //    puiResponse[0] = 2;
//  256     uint8_t uiCrc = (COMMAND_REPORT_TYPE + MODULE_TYPE_MVSN21);
//  257 //    puiResponse[uiLength++] = 0;
//  258     puiResponse[uiLength++] = COMMAND_REPORT_TYPE;
        MOVW    R31:R30, R19:R18
        ADD     R30, R20
        ADC     R31, R21
        LDI     R16, 145
        RCALL   ?Subroutine0
//  259     puiResponse[uiLength++] = MODULE_TYPE_MVSN21;
??CrossCallReturnLabel_0:
        MOVW    R31:R30, R19:R18
        ADD     R30, R20
        ADC     R31, R21
        LDI     R16, 1
        RCALL   ?Subroutine0
//  260     puiResponse[uiLength++] = uiCrc;
??CrossCallReturnLabel_1:
        ADD     R18, R20
        ADC     R19, R21
        MOVW    R31:R30, R19:R18
        LDI     R16, 146
        RCALL   ?Subroutine0
//  261 
//  262     return uiLength;
??CrossCallReturnLabel_2:
        REQUIRE ?Subroutine2
        ;               // Fall through to label ?Subroutine2
//  263 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
        MOVW    R17:R16, R21:R20
        RET

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        ST      Z, R16
        SUBI    R20, 255
        SBCI    R21, 255
        RET
//  264 
//  265 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  266 int16_t CMvsn21::ReadData(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiLength)
??ReadData:
//  267 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R27:R26, R19:R18
//  268     uiLength = 0;
//  269 //    uint8_t *puiMessage = auiDiscreteInputBitData;
//  270 //    TChannelRemap __flash *pxMeasurementChannelRemap;
//  271 //    pxMeasurementChannelRemap = &m_axMeasurementChannelRemap[0];
//  272 
//  273     // Протокол обмена данными по шине Spi.
//  274     // Первый байт - пустой.
//  275     puiResponse[uiLength++] = 0;
        LDI     R16, 0
        ST      X, R16
//  276 //    // Второй байт - "эхо".
//  277 //    puiResponse[uiLength++] = COMMAND_READ_DATA;
//  278     // Третий байт - команда обмен данными.
//  279     puiResponse[uiLength++] = COMMAND_READ_DATA;
        MOVW    R31:R30, R19:R18
        LDI     R16, 66
        STD     Z+1, R16
        LDI     R24, 2
        LDI     R25, 0
//  280 
//  281 
//  282 
//  283 //    memcpy(puiResponse, auiDiscreteInputBitData, 10);
//  284 
//  285 
//  286 
//  287 
//  288 
//  289 
//  290     // Следующие шесть байт - данные состояния дискретных входов.
//  291     // Упакуем двухбитовые данные состояния измерительных каналов всех чипов в дискретные входы.
//  292     // i - индекс дискретных входов.
//  293     for (int8_t i = 0; i < DISCRETE_INPUT_NUMBER; )
        LDI     R16, 0
//  294     {
//  295         uint8_t uiState = 0;
??ReadData_1:
        LDI     R21, 0
//  296 //        puiResponse[uiLength] = 0;
//  297 //        // Упакуем двухбитовые данные состояния восьми измерительных каналов одного чипа в дискретные входы.
//  298         // Упакуем двухбитовые данные состояния четырёх измерительных каналов в байт по четыре дискретных входа.
//  299         for (int8_t j= 0;
        LDI     R19, 4
//  300                 j < CHANNELS_IN_BYTE;
//  301                 j += 1)
//  302         {
//  303             // Упаковали все данные состояния измерительных каналов?
//  304             if (i < DISCRETE_INPUT_NUMBER)
//  305             {
//  306                 uint8_t uiInputIndex;
//  307                 uiInputIndex = ((m_axMeasurementChannelRemap[i].uiChip *
//  308                                  (MEASURE_CHANNEL_NUMBER * MEASURE_CHANNEL_STATE_BIT_NUMBER)) +
//  309                                 (m_axMeasurementChannelRemap[i].uiChannel * MEASURE_CHANNEL_STATE_BIT_NUMBER));
??ReadData_2:
        MOV     R22, R16
        MOV     R23, R16
        LSL     R23
        SBC     R23, R23
        LSL     R22
        ROL     R23
        LDI     R30, LOW(??m_axMeasurementChannelRemap)
        LDI     R31, (??m_axMeasurementChannelRemap) >> 8
        ADD     R30, R22
        ADC     R31, R23
        LD      R20, Z
        SWAP    R20
        ANDI    R20, 0xF0
        LDD     R17, Z+1
        LSL     R17
        ADD     R20, R17
//  310 
//  311                 for (int8_t k = 0;
        LDI     R18, 0
        LDI     R17, 2
//  312                         k < MEASURE_CHANNEL_STATE_BIT_NUMBER;
//  313                         k++)
//  314                 {
//  315                     uiState >>= 1;
??ReadData_3:
        LSR     R21
//  316                     if (m_aucRtuDiscreteInputsArray[uiInputIndex + k])
        MOV     R0, R20
        CLR     R1
        MOV     R23, R18
        LSL     R23
        SBC     R23, R23
        ADD     R0, R18
        ADC     R1, R23
        MOVW    R31:R30, R1:R0
        SUBI    R30, LOW((-(??m_aucRtuDiscreteInputsArray) & 0xFFFF))
        SBCI    R31, (-(??m_aucRtuDiscreteInputsArray) & 0xFFFF) >> 8
        LD      R22, Z
        TST     R22
        BREQ    ??ReadData_4
//  317 //                    if (m_aucRtuDiscreteInputsArray[(i * 2) + k])
//  318                     {
//  319                         uiState |= 0x80;
        ORI     R21, 0x80
//  320                     }
//  321                 }
??ReadData_4:
        INC     R18
        DEC     R17
        BRNE    ??ReadData_3
//  322 //                    uiState >>= 1;
//  323 ////                    if (m_aucRtuDiscreteInputsArray[uiInputIndex + k])
//  324 ////                    {
//  325 ////                        uiState |= 0x80;
//  326 ////                    }
//  327 //                    uiState >>= 1;
//  328 //                        uiState |= 0x80;
//  329 
//  330 
//  331 
//  332 
//  333 //                // Отобразим данные состояния измерительных каналов на дискретные входы во временный буфер.
//  334 //                puiResponse[uiLength] |=
//  335 //                    // Следующие два бита в байте.
//  336 //                    // Выберем канал по индексу чипа, карты сопоставления измерительных каналов со входами модуля.
//  337 //                    // Выберем канал по индексу входа модуля, карты сопоставления измерительных каналов со входами модуля.
//  338 //                    ((auiDiscreteInputBitData[(m_axMeasurementChannelRemap[i].uiChip *
//  339 //                                               (MEASURE_CHANNEL_NUMBER * MEASURE_CHANNEL_STATE_BIT_NUMBER)) +
//  340 //                                              m_axMeasurementChannelRemap[i].uiChannel] & 0x80) >> j);
//  341 //
//  342 //                puiResponse[uiLength] |=
//  343 //                    // Следующие два бита в байте.
//  344 //                    // Выберем канал по индексу чипа, карты сопоставления измерительных каналов со входами модуля.
//  345 //                    // Выберем канал по индексу входа модуля, карты сопоставления измерительных каналов со входами модуля.
//  346 //                    ((auiDiscreteInputBitData[(m_axMeasurementChannelRemap[i].uiChip *
//  347 //                                               (MEASURE_CHANNEL_NUMBER * MEASURE_CHANNEL_STATE_BIT_NUMBER)) +
//  348 //                                              m_axMeasurementChannelRemap[i].uiChannel] & 0x80) >> j);
//  349 //                // Состояние измерительного канала занимает два младших бита.
//  350 ////                      uiState & 0x03) << j);
//  351                 // Следующий дискретный вход.
//  352                 i++;
        INC     R16
//  353             }
        DEC     R19
        BREQ    ??ReadData_5
        CPI     R16, 24
        BRGE    ??ReadData_6
        RJMP    ??ReadData_2
//  354             else
//  355             {
//  356                 // Упаковали все данные состояния измерительных каналов.
//  357                 goto EndStateDataPack;
//  358             }
//  359         }
//  360         puiResponse[uiLength] = uiState;
??ReadData_5:
        MOVW    R31:R30, R27:R26
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R21
//  361         // Следующий байт.
//  362         uiLength++;
        ADIW    R25:R24, 1
//  363     }
        CPI     R16, 24
        BRLT    ??ReadData_1
//  364 
//  365 EndStateDataPack:
//  366 
//  367     // Последний байт - сумма всех байт начиная с третьего(пустой байт и "эхо" не учитываются).
//  368     puiResponse[uiLength] =
//  369         usCrcSummOneByteCalculation(&puiResponse[2], (uiLength - 2));
??ReadData_6:
        MOVW    R19:R18, R25:R24
        SUBI    R18, 2
        SBCI    R19, 0
        MOVW    R17:R16, R27:R26
        SUBI    R16, 254
        SBCI    R17, 255
        RCALL   ??usCrcSummOneByteCalculation
        ADD     R26, R24
        ADC     R27, R25
        ST      X, R16
//  370 
//  371     return uiLength;
        MOVW    R17:R16, R25:R24
        REQUIRE ?Subroutine3
        ;               // Fall through to label ?Subroutine3
//  372 
//  373 
//  374 ////    // Закончено измерение входных каналов?
//  375 ////    if (m_uiMeasureFlowControl == FSM_IDDLE)
//  376 ////    {
//  377 //    memcpy(puiResponse, auiDiscreteInputBitData, 10);
//  378 ////    }
//  379 ////    else
//  380 ////    {
//  381 ////        // Протокол обмена данными по шине Spi.
//  382 ////        // Первый байт - пустой.
//  383 ////        puiResponse[uiLength++] = 0;
//  384 ////        // Второй байт - "эхо".
//  385 ////        puiResponse[uiLength++] = COMMAND_DATA_NOT_READY;
//  386 ////        // Третий байт - команда обмен данными.
//  387 ////        puiResponse[uiLength++] = COMMAND_DATA_NOT_READY;
//  388 ////
//  389 ////
//  390 //////    // Последний байт - сумма всех байт начиная с третьего(пустой байт и "эхо" не учитываются).
//  391 //////    puiMessage[uiLength] =
//  392 //////        usCrcSummOneByteCalculation(&puiMessage[2], (uiLength - 2));
//  393 ////    }
//  394 //    return uiLength;
//  395 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//  396 
//  397 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  398 int16_t CMvsn21::SpiReply(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiFrameLength)
??SpiReply:
//  399 {
//  400     uint16_t uiLength = uiFrameLength;
//  401     // Какой поступил запрос?
//  402     switch (puiRequest[0])
        MOVW    R31:R30, R17:R16
        LD      R22, Z
        SUBI    R22, 145
        BREQ    ??SpiReply_1
        SUBI    R22, 177
        BREQ    ??SpiReply_2
        RJMP    ??SpiReply_3
//  403     {
//  404     case COMMAND_REPORT_TYPE:
//  405         uiLength = ReportType(puiRequest, puiResponse, uiLength);
??SpiReply_1:
        RCALL   ??ReportType
        RJMP    ??SpiReply_4
//  406         break;
//  407 
//  408     case COMMAND_READ_DATA:
//  409         uiLength = ReadData(puiRequest, puiResponse, uiLength);
??SpiReply_2:
        RCALL   ??ReadData
??SpiReply_4:
        MOVW    R21:R20, R17:R16
//  410         break;
//  411 
//  412 //    case COMMAND_READ_DATA_BASE:
//  413 ////        uiLength = ReadHoldingRegisters(puiRequest, puiResponse, uiLength);
//  414 //        break;
//  415 //
//  416 //    case COMMAND_WRITE_DATA_BASE:
//  417 ////        uiLength = ReadInputRegisters(puiRequest, puiResponse, uiLength);
//  418 //        break;
//  419 
//  420     default:
//  421         break;
//  422     }
//  423     return uiLength;
??SpiReply_3:
        RJMP    ?Subroutine2
//  424 }
//  425 
//  426 //-----------------------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  427 void CMvsn21::SpiFsm(void)
??SpiFsm:
//  428 {
        RCALL   ?PROLOGUE4_L09
//  429     int16_t iReceivedCounter;
//  430 
//  431     switch (m_uiFlowControl)
        LDI     R26, LOW(??m_uiMessageLength)
        LDI     R27, (??m_uiMessageLength) >> 8
        LDS     R16, (??m_uiMessageLength + 2)
        DEC     R16
        BREQ    ??SpiFsm_1
        DEC     R16
        BREQ    ??SpiFsm_2
        SUBI    R16, 8
        BREQ    ??SpiFsm_3
        RJMP    ??SpiFsm_4
//  432     {
//  433     case FSM_IDDLE:
//  434         break;
//  435 
//  436     case FSM_START:
//  437 //        Reset();
//  438         CSpi::Reset();
??SpiFsm_1:
        RCALL   ??Reset
//  439         m_uiMessageLength = 0;
        LDI     R16, 0
        ST      X+, R16
        ST      X, R16
//  440         m_uiFlowControl = FSM_WAITING_MESSAGE;
        LDI     R16, 2
??SpiFsm_5:
        STS     (??m_uiMessageLength + 2), R16
//  441         break;
//  442 
//  443     case FSM_WAITING_MESSAGE:
//  444         if (CSpi::ByteIsReceived())
//  445 //        if (Select())
//  446         {
//  447 //            iReceivedCounter = Exchange();
//  448             iReceivedCounter = CSpi::Exchange();
//  449 
//  450             if (iReceivedCounter > 0)
//  451             {
//  452                 m_uiMessageLength += iReceivedCounter;
//  453 
//  454                 if (SpiReply(CSpi::m_puiRxBuffer, CSpi::m_puiTxBuffer, m_uiMessageLength))
//  455                 {
//  456                     m_uiFlowControl = FSM_DATA_EXCHANGE_END_WAITING;
//  457                 }
//  458                 else
//  459                 {
//  460                     m_uiFlowControl = FSM_IDDLE;
//  461                 }
//  462             }
//  463             else if (iReceivedCounter == -1)
//  464             {
//  465                 m_uiFlowControl = FSM_IDDLE;
//  466             }
//  467         }
//  468 
//  469         break;
//  470 
//  471     case FSM_DATA_EXCHANGE_END_WAITING:
//  472         break;
//  473 
//  474     case FSM_DATA_EXCHANGE_END:
//  475         if (CModbus::m_uiSlaveAddress >= 2)
//  476         {
//  477             CModbus::m_uiSlaveAddress = 1;
//  478         }
//  479         else
//  480         {
//  481             CModbus::m_uiSlaveAddress += 1;
//  482         }
//  483         CModbus::ReadDiscreteInputsRequest((CModbus::m_uiSlaveAddress),
//  484                                            0,
//  485                                            (MEASURE_CHANNEL_NUMBER * MEASURE_CHANNEL_STATE_BIT_NUMBER));
//  486         m_uiFlowControl = FSM_IDDLE;
//  487         break;
//  488 
//  489     default:
//  490         break;
//  491     }
//  492 
//  493 }
??SpiFsm_4:
        RJMP    ?Subroutine3
??SpiFsm_2:
        LDS     R16, ??m_bfByteIsReceived
        TST     R16
        BREQ    ??SpiFsm_4
        RCALL   ??Exchange
        CPI     R16, 1
        LDI     R18, 0
        CPC     R17, R18
        BRLT    ??SpiFsm_6
        LD      R18, X+
        LD      R19, X
        ADD     R18, R16
        ADC     R19, R17
        ST      X, R19
        ST      -X, R18
        MOVW    R21:R20, R19:R18
        LDI     R30, LOW(??m_puiTxBuffer)
        LDI     R31, (??m_puiTxBuffer) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RCALL   ??SpiReply
        OR      R16, R17
        BREQ    ??SpiFsm_7
        LDI     R16, 9
        RJMP    ??SpiFsm_5
??SpiFsm_6:
        CPI     R16, 255
        SBCI    R17, 255
        BRNE    ??SpiFsm_4
??SpiFsm_7:
        LDI     R16, 0
        RJMP    ??SpiFsm_5
??SpiFsm_3:
        LDS     R16, ??m_uiSlaveAddress
        CPI     R16, 2
        BRCS    ??SpiFsm_8
        LDI     R16, 1
        RJMP    ??SpiFsm_9
??SpiFsm_8:
        INC     R16
??SpiFsm_9:
        STS     ??m_uiSlaveAddress, R16
        LDI     R20, 16
        LDI     R21, 0
        LDI     R18, 0
        LDI     R19, 0
        RCALL   ??ReadDiscreteInputsRequest
        RJMP    ??SpiFsm_7
//  494 
//  495 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  496 void CMvsn21::MeasureFsm(void)
??MeasureFsm:
//  497 {
        LDS     R16, (??m_uiChannel + 1)
        DEC     R16
        BREQ    ??MeasureFsm_1
        SUBI    R16, 10
        BREQ    ??MeasureFsm_2
        RET
//  498     switch (m_uiMeasureFlowControl)
//  499     {
//  500     case FSM_IDDLE:
//  501         break;
//  502 
//  503     case FSM_START:
//  504         m_uiChannel = 0;
??MeasureFsm_1:
        LDI     R16, 0
        STS     ??m_uiChannel, R16
//  505         CAdc::Enable();
        RCALL   ??Enable
//  506         CAdc::ChannelSelect(m_uiChannel);
        RCALL   ?Subroutine1
//  507         CAdc::Start();
??CrossCallReturnLabel_4:
        RCALL   ??Start
//  508         m_uiMeasureFlowControl = FSM_CONTINUOUS_MEASURE;
        LDI     R16, 11
        STS     (??m_uiChannel + 1), R16
//  509         break;
        RET
//  510 
//  511     case FSM_CONTINUOUS_MEASURE:
//  512         if (CAdc::MeasureIsComlete())
??MeasureFsm_2:
        LDS     R16, _A_ADCSRA
        SBRS    R16, 4
        RJMP    ??MeasureFsm_3
        LDS     R16, 122
        ORI     R16, 0x10
        STS     122, R16
//  513         {
//  514 ////            uint16_t uiData = CAdc::GetMeasureValue();
//  515 //            axChipsChannelsData[MASTER_CHIP_ADDRESS].axMeasurementChannels[m_uiChannel].uiState =
//  516 //                CMeasurementChannel::StatusCheck(CAdc::GetMeasureValue());
//  517 
//  518             uint8_t uiState =
//  519                 CMeasurementChannel::StatusCheck(CAdc::GetMeasureValue());
        RCALL   ??GetMeasureValue
        RCALL   ??StatusCheck
//  520             m_aucRtuDiscreteInputsArray[(m_uiChannel * 2) + (MEASURE_CHANNEL_NUMBER * MEASURE_CHANNEL_STATE_BIT_NUMBER * 2)] = (uiState & 0x01);//(uiState & 0x01);
        LDS     R17, ??m_uiChannel
        LDI     R18, 2
        MUL     R17, R18
        LDI     R30, LOW(??m_aucRtuDiscreteInputsArray)
        LDI     R31, (??m_aucRtuDiscreteInputsArray) >> 8
        ADD     R30, R0
        ADC     R31, R1
        MOV     R17, R16
        ANDI    R17, 0x01
        STD     Z+32, R17
//  521             m_aucRtuDiscreteInputsArray[(m_uiChannel * 2) + (MEASURE_CHANNEL_NUMBER * MEASURE_CHANNEL_STATE_BIT_NUMBER * 2) + 1] = ((uiState >> 1) & 0x01);//((uiState >> 1) & 0x01);
        BST     R16, 1
        LDI     R17, 0
        BLD     R17, 0
        STD     Z+33, R17
//  522 
//  523             m_uiChannel++;
        LDI     R30, LOW(??m_uiChannel)
        LDI     R31, (??m_uiChannel) >> 8
        LD      R16, Z
        INC     R16
        ST      Z, R16
//  524             if (m_uiChannel < MEASURE_CHANNEL_NUMBER)
        CPI     R16, 8
        BRCC    ??MeasureFsm_4
//  525             {
//  526                 CAdc::Stop();
        RCALL   ??Stop
//  527                 CAdc::ChannelSelect(m_uiChannel);
        RCALL   ?Subroutine1
//  528                 CAdc::Start();
??CrossCallReturnLabel_3:
        RJMP    ??Start
//  529             }
//  530             else
//  531             {
//  532                 CAdc::Disable();
??MeasureFsm_4:
        RCALL   ??Disable
//  533 //                ChannelsToDiscreteInput();
//  534                 m_uiMeasureFlowControl = FSM_IDDLE;
        LDI     R16, 0
        STS     (??m_uiChannel + 1), R16
//  535             }
//  536         }
//  537         break;
//  538 
//  539     default:
//  540         break;
//  541     }
//  542 }
??MeasureFsm_3:
        RET
        REQUIRE _A_ADCSRA

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
        LDS     R16, ??m_uiChannel
        RJMP    ??ChannelSelect

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:ROOT(0)
`?<Initializer for m_axMeasurementChannelRemap>`:
        DC8 0, 6, 0, 7, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 1, 6, 1, 7, 1, 0, 1
        DC8 1, 1, 2, 1, 3, 1, 4, 1, 5, 2, 6, 2, 7, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4
        DC8 2, 5

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_F:CODE:ROOT(0)
        DC8 0, 0

        END
//  543 
//  544 
//  545 
//  546 
//  547 
//  548 
//  549 
//  550 ////-----------------------------------------------------------------------------------------------------
//  551 //CMvsn21Driver::CMvsn21Driver(uint8_t uiType) :
//  552 //
//  553 //    m_uiType(uiType),
//  554 //{
//  555 //
//  556 //}
//  557 //
//  558 ////-----------------------------------------------------------------------------------------------------
//  559 //CMvsn21Driver::~CMvsn21Driver()
//  560 //{
//  561 //
//  562 //}
//  563 //
//  564 ////-----------------------------------------------------------------------------------------------------
//  565 //uint16_t CMvsn21Driver::TypeReport(uint8_t *puiDestination, uint16_t uiLength)
//  566 //{
//  567 //
//  568 //}
// 
//  87 bytes in segment ABSOLUTE
// 486 bytes in segment CODE
//  12 bytes in segment INITTAB
//   2 bytes in segment NEAR_F
//  48 bytes in segment NEAR_I
//  48 bytes in segment NEAR_ID
// 118 bytes in segment NEAR_Z
// 
// 536 bytes of CODE memory (+ 12 bytes shared)
// 166 bytes of DATA memory (+ 87 bytes shared)
//
//Errors: none
//Warnings: 5
