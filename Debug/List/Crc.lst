###############################################################################
#
# IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR           13/Apr/2022  19:24:08
# Copyright 1996-2018 IAR Systems AB.
#
#    Source file  =  D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Crc.cpp
#    Command line =  
#        -f C:\Users\ghost\AppData\Local\Temp\EW7EC0.tmp
#        (--string_literals_in_flash
#        D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Crc.cpp --cpu=m48 -ms -o
#        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\Obj -lCN
#        D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\List
#        --initializers_in_flash --root_variables --no_cse --no_inline
#        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I
#        D:\Projects\CautoProjects\Mvsn21\Mvsn21\include\ --eeprom_size 256
#        --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -On --eec++)
#    Locale       =  Russian_RUS.1251
#    List file    =  D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\List\Crc.lst
#    Object file  =  D:\Projects\CautoProjects\Mvsn21\Mvsn21\Debug\Obj\Crc.r90
#
###############################################################################

D:\Projects\CautoProjects\Mvsn21\Mvsn21\src\Crc.cpp
      1          #include <stdint.h>
      2          #include "Crc.h"
      3          
      4          //unsigned short CRC16(const unsigned char *puiSource, unsigned short nusLength)
      5          //{
      6          //    static const unsigned short usCRCTable[] =
      7          //    {
      8          //        0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,
      9          //        0XC601, 0X06C0, 0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,
     10          //        0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0F00, 0XCFC1, 0XCE81, 0X0E40,
     11          //        0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0, 0X0880, 0XC841,
     12          //        0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
     13          //        0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
     14          //        0X1400, 0XD4C1, 0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641,
     15          //        0XD201, 0X12C0, 0X1380, 0XD341, 0X1100, 0XD1C1, 0XD081, 0X1040,
     16          //        0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1, 0XF281, 0X3240,
     17          //        0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
     18          //        0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41,
     19          //        0XFA01, 0X3AC0, 0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840,
     20          //        0X2800, 0XE8C1, 0XE981, 0X2940, 0XEB01, 0X2BC0, 0X2A80, 0XEA41,
     21          //        0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1, 0XEC81, 0X2C40,
     22          //        0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
     23          //        0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041,
     24          //        0XA001, 0X60C0, 0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240,
     25          //        0X6600, 0XA6C1, 0XA781, 0X6740, 0XA501, 0X65C0, 0X6480, 0XA441,
     26          //        0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0, 0X6E80, 0XAE41,
     27          //        0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
     28          //        0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41,
     29          //        0XBE01, 0X7EC0, 0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40,
     30          //        0XB401, 0X74C0, 0X7580, 0XB541, 0X7700, 0XB7C1, 0XB681, 0X7640,
     31          //        0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0, 0X7080, 0XB041,
     32          //        0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
     33          //        0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440,
     34          //        0X9C01, 0X5CC0, 0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40,
     35          //        0X5A00, 0X9AC1, 0X9B81, 0X5B40, 0X9901, 0X59C0, 0X5880, 0X9841,
     36          //        0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1, 0X8A81, 0X4A40,
     37          //        0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
     38          //        0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
     39          //        0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
     40          //    };
     41          //
     42          //    unsigned char ucTemp;
     43          //    unsigned short usCrc = 0xFFFF;
     44          //
     45          //    while (nusLength--)
     46          //    {
     47          //        ucTemp = *puiSource++ ^ usCrc;
     48          //        usCrc >>= 8;
     49          //        usCrc  ^= usCRCTable[ucTemp];
     50          //    }
     51          //    return usCrc;
     52          //}
     53          
     54          
     55          //--------------------------------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
     56          unsigned short usCrc16(unsigned char *puiSource, unsigned short nusLength)
   \                     ??usCrc16:
     57          {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
     58              unsigned short usCrc = 0xFFFF;
   \   00000002   EF0F               LDI     R16, 255
   \   00000004   EF1F               LDI     R17, 255
     59              unsigned char ucCounter;
     60          
     61              while (nusLength != 0)
   \                     ??usCrc16_1:
   \   00000006   2F52               MOV     R21, R18
   \   00000008   2B53               OR      R21, R19
   \   0000000A   F0C1               BREQ    ??usCrc16_2
     62              {
     63                  usCrc = usCrc ^ (unsigned short)(*puiSource++);
   \   0000000C   8160               LD      R22, Z
   \   0000000E   E070               LDI     R23, 0
   \   00000010   2706               EOR     R16, R22
   \   00000012   2717               EOR     R17, R23
   \   00000014   9631               ADIW    R31:R30, 1
     64                  ucCounter = 8;
   \   00000016   E048               LDI     R20, 8
     65                  while(ucCounter != 0)
   \                     ??usCrc16_3:
   \   00000018   2344               TST     R20
   \   0000001A   F069               BREQ    ??usCrc16_4
     66                  {
     67                      if (usCrc & 0x0001)
   \   0000001C   FB00               BST     R16, 0
   \   0000001E   F43E               BRTC    ??usCrc16_5
     68                      {
     69                          usCrc = usCrc >> 1 ^ 0xA001;
   \   00000020   9516               LSR     R17
   \   00000022   9507               ROR     R16
   \   00000024   E051               LDI     R21, 1
   \   00000026   2705               EOR     R16, R21
   \   00000028   EA50               LDI     R21, 160
   \   0000002A   2715               EOR     R17, R21
   \   0000002C   C002               RJMP    ??usCrc16_6
     70                      }
     71                      else usCrc = usCrc >> 1;
   \                     ??usCrc16_5:
   \   0000002E   9516               LSR     R17
   \   00000030   9507               ROR     R16
     72                      ucCounter--;
   \                     ??usCrc16_6:
   \   00000032   954A               DEC     R20
   \   00000034   CFF1               RJMP    ??usCrc16_3
     73                  }
     74                  nusLength--;
   \                     ??usCrc16_4:
   \   00000036   5021               SUBI    R18, 1
   \   00000038   4030               SBCI    R19, 0
   \   0000003A   CFE5               RJMP    ??usCrc16_1
     75              }
     76              usCrc = usCrc>>8 ^ usCrc<<8;
   \                     ??usCrc16_2:
   \   0000003C   0108               MOVW    R1:R0, R17:R16
   \   0000003E   2C01               MOV     R0, R1
   \   00000040   2411               CLR     R1
   \   00000042   01B8               MOVW    R23:R22, R17:R16
   \   00000044   2F76               MOV     R23, R22
   \   00000046   E060               LDI     R22, 0
   \   00000048   0180               MOVW    R17:R16, R1:R0
   \   0000004A   2706               EOR     R16, R22
   \   0000004C   2717               EOR     R17, R23
     77              return usCrc;
   \   0000004E   9508               RET
     78          }
     79          
     80          ////-----------------------------------------------------------------------------------------------------
     81          //int iCrc16Check(unsigned char *puiSource, unsigned short nusLength)
     82          //{
     83          //    unsigned short usCrc;
     84          //
     85          //    usCrc = (((unsigned short)(puiSource[nusLength])) << 8) |
     86          //            (unsigned short)(puiSource[nusLength + 1]);
     87          //
     88          //    if (usCrc16(puiSource, nusLength) == usCrc)
     89          //    {
     90          //        return 0;
     91          //    }
     92          //    else
     93          //    {
     94          //        return -1;
     95          //    }
     96          //}
     97          
     98          //-----------------------------------------------------------------------------------------------------
     99          // вычисляет двухбайтовую контрольную сумму.

   \                                 In  segment CODE, align 2, keep-with-next
    100          unsigned short usCrcSummTwoByteCalculation(
   \                     ??usCrcSummTwoByteCalculation:
    101              unsigned char *puiSource,
    102              unsigned int nuiNbyte)
    103          {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
    104              unsigned short usData;
    105          
    106              usData = 0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
    107              do
    108              {
    109                  usData += (unsigned short)*puiSource++;
   \                     ??usCrcSummTwoByteCalculation_1:
   \   00000006   8140               LD      R20, Z
   \   00000008   E050               LDI     R21, 0
   \   0000000A   0F04               ADD     R16, R20
   \   0000000C   1F15               ADC     R17, R21
   \   0000000E   9631               ADIW    R31:R30, 1
    110                  nuiNbyte--;
   \   00000010   5021               SUBI    R18, 1
   \   00000012   4030               SBCI    R19, 0
    111              }
    112              while (nuiNbyte);
   \   00000014   2F42               MOV     R20, R18
   \   00000016   2B43               OR      R20, R19
   \   00000018   F7B1               BRNE    ??usCrcSummTwoByteCalculation_1
    113          
    114              return usData;
   \   0000001A   9508               RET
    115          }
    116          
    117          //-----------------------------------------------------------------------------------------------------
    118          // сравнивает двухбайтовую контрольную сумму.

   \                                 In  segment CODE, align 2, keep-with-next
    119          int iCrcSummTwoByteCompare(unsigned char *puiSource,
   \                     ??iCrcSummTwoByteCompare:
    120                                     unsigned int nuiNbyte)
    121          {
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    122              unsigned short usData;
    123          
    124              usData = 0;
   \   00000006   E020               LDI     R18, 0
   \   00000008   E030               LDI     R19, 0
    125              do
    126              {
    127                  usData += (unsigned short)*puiSource++;
   \                     ??iCrcSummTwoByteCompare_1:
   \   0000000A   8100               LD      R16, Z
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   0F20               ADD     R18, R16
   \   00000010   1F31               ADC     R19, R17
   \   00000012   9631               ADIW    R31:R30, 1
    128                  nuiNbyte--;
   \   00000014   9701               SBIW    R25:R24, 1
    129              }
    130              while (nuiNbyte);
   \   00000016   2F08               MOV     R16, R24
   \   00000018   2B09               OR      R16, R25
   \   0000001A   F7B9               BRNE    ??iCrcSummTwoByteCompare_1
    131          
    132              if ((unsigned char)usData  == *puiSource++)
   \   0000001C   01DF               MOVW    R27:R26, R31:R30
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   9631               ADIW    R31:R30, 1
   \   00000022   2F02               MOV     R16, R18
   \   00000024   911C               LD      R17, X
   \   00000026   1701               CP      R16, R17
   \   00000028   F449               BRNE    ??iCrcSummTwoByteCompare_2
    133              {
    134          
    135                  if ((unsigned char)(usData >> 8)  == *puiSource)
   \   0000002A   0189               MOVW    R17:R16, R19:R18
   \   0000002C   2F01               MOV     R16, R17
   \   0000002E   E010               LDI     R17, 0
   \   00000030   8110               LD      R17, Z
   \   00000032   1701               CP      R16, R17
   \   00000034   F419               BRNE    ??iCrcSummTwoByteCompare_2
    136                  {
    137                      return 1;
   \   00000036   E001               LDI     R16, 1
   \   00000038   E010               LDI     R17, 0
   \   0000003A   C002               RJMP    ??iCrcSummTwoByteCompare_3
    138                  }
    139              }
    140              return -1;
   \                     ??iCrcSummTwoByteCompare_2:
   \   0000003C   EF0F               LDI     R16, 255
   \   0000003E   EF1F               LDI     R17, 255
   \                     ??iCrcSummTwoByteCompare_3:
   \   00000040   E0E4               LDI     R30, 4
   \   00000042   ....               RJMP    ?EPILOGUE_B4_L09
    141          }
    142          
    143          //-----------------------------------------------------------------------------------------------------
    144          // вычисляет однобайтовую контрольную сумму.

   \                                 In  segment CODE, align 2, keep-with-next
    145          uint8_t usCrcSummOneByteCalculation(
   \                     ??usCrcSummOneByteCalculation:
    146              uint8_t *puiSource,
    147              uint16_t nuiNbyte)
    148          {
   \   00000000   01B8               MOVW    R23:R22, R17:R16
    149              uint8_t uiData = 0;
   \   00000002   E000               LDI     R16, 0
    150          
    151              for (int8_t i = 0; i < nuiNbyte; i++)
   \   00000004   E040               LDI     R20, 0
   \                     ??usCrcSummOneByteCalculation_1:
   \   00000006   2F54               MOV     R21, R20
   \   00000008   0F55               LSL     R21
   \   0000000A   0B55               SBC     R21, R21
   \   0000000C   1742               CP      R20, R18
   \   0000000E   0753               CPC     R21, R19
   \   00000010   F450               BRCC    ??usCrcSummOneByteCalculation_2
    152              {
    153                  uiData += puiSource[i];
   \   00000012   2F54               MOV     R21, R20
   \   00000014   0F55               LSL     R21
   \   00000016   0B55               SBC     R21, R21
   \   00000018   01FB               MOVW    R31:R30, R23:R22
   \   0000001A   0FE4               ADD     R30, R20
   \   0000001C   1FF5               ADC     R31, R21
   \   0000001E   8110               LD      R17, Z
   \   00000020   0F01               ADD     R16, R17
    154              }
   \   00000022   9543               INC     R20
   \   00000024   CFF0               RJMP    ??usCrcSummOneByteCalculation_1
    155          
    156              return uiData;
   \                     ??usCrcSummOneByteCalculation_2:
   \   00000026   9508               RET
    157          }
    158          
    159          //-----------------------------------------------------------------------------------------------------
    160          // сравнивает однобайтовую контрольную сумму.

   \                                 In  segment CODE, align 2, keep-with-next
    161          int iCrcSummOneByteCompare(unsigned char *puiSource,
   \                     ??iCrcSummOneByteCompare:
    162                                     unsigned int nuiNbyte)
    163          {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
    164              unsigned char ucData;
    165          
    166              ucData = 0;
   \   00000002   E040               LDI     R20, 0
    167              do
    168              {
    169                  ucData += *puiSource++;
   \                     ??iCrcSummOneByteCompare_1:
   \   00000004   8100               LD      R16, Z
   \   00000006   0F40               ADD     R20, R16
   \   00000008   9631               ADIW    R31:R30, 1
    170                  nuiNbyte--;
   \   0000000A   5021               SUBI    R18, 1
   \   0000000C   4030               SBCI    R19, 0
    171              }
    172              while ((nuiNbyte) != 0);
   \   0000000E   2F02               MOV     R16, R18
   \   00000010   2B03               OR      R16, R19
   \   00000012   F7C1               BRNE    ??iCrcSummOneByteCompare_1
    173          
    174              if (ucData == *puiSource)
   \   00000014   8100               LD      R16, Z
   \   00000016   1740               CP      R20, R16
   \   00000018   F419               BRNE    ??iCrcSummOneByteCompare_2
    175              {
    176                  return 1;
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   9508               RET
    177              }
    178              else
    179              {
    180                  return -1;
   \                     ??iCrcSummOneByteCompare_2:
   \   00000020   EF0F               LDI     R16, 255
   \   00000022   EF1F               LDI     R17, 255
   \   00000024   9508               RET
    181              }
    182          }
    183          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   iCrcSummOneByteCompare(unsigned char *, unsigned int)
      4      2   iCrcSummTwoByteCompare(unsigned char *, unsigned int)
      0      2   usCrc16(unsigned char *, unsigned short)
      0      2   usCrcSummOneByteCalculation(uint8_t *, uint16_t)
      0      2   usCrcSummTwoByteCalculation(unsigned char *, unsigned int)


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      38  iCrcSummOneByteCompare(unsigned char *, unsigned int)
      68  iCrcSummTwoByteCompare(unsigned char *, unsigned int)
      80  usCrc16(unsigned char *, unsigned short)
      40  usCrcSummOneByteCalculation(uint8_t *, uint16_t)
      28  usCrcSummTwoByteCalculation(unsigned char *, unsigned int)

 
 254 bytes in segment CODE
 
 254 bytes of CODE memory

Errors: none
Warnings: none
